
LCD_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000300c  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009780  08009780  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009788  08009788  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009788  08009788  00019788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000023c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001817f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358a  00000000  00000000  0003822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0003ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002379f  00000000  00000000  0003db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018097  00000000  00000000  000612e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfe2e  00000000  00000000  0007937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001491ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fd0  00000000  00000000  00149200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800675c 	.word	0x0800675c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800675c 	.word	0x0800675c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <button_init+0x14>)
 8000582:	f002 fbe5 	bl	8002d50 <HAL_GPIO_WritePin>

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020c00 	.word	0x40020c00

08000590 <button_Scan>:

void button_Scan(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <button_Scan+0xc8>)
 800059c:	f002 fbd8 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2108      	movs	r1, #8
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <button_Scan+0xc8>)
 80005a6:	f002 fbd3 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005aa:	230a      	movs	r3, #10
 80005ac:	2202      	movs	r2, #2
 80005ae:	492b      	ldr	r1, [pc, #172]	; (800065c <button_Scan+0xcc>)
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <button_Scan+0xd0>)
 80005b2:	f004 fafa 	bl	8004baa <HAL_SPI_Receive>
	  int button_index = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005be:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e03f      	b.n	8000646 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db06      	blt.n	80005da <button_Scan+0x4a>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	dc03      	bgt.n	80005da <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e018      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	dd07      	ble.n	80005f0 <button_Scan+0x60>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dc04      	bgt.n	80005f0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f1c3 0307 	rsb	r3, r3, #7
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e00d      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	dd06      	ble.n	8000604 <button_Scan+0x74>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	dc03      	bgt.n	8000604 <button_Scan+0x74>
			  button_index = i + 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e003      	b.n	800060c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f1c3 0317 	rsb	r3, r3, #23
 800060a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <button_Scan+0xcc>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	897b      	ldrh	r3, [r7, #10]
 8000612:	4013      	ands	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <button_Scan+0x96>
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2100      	movs	r1, #0
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000624:	e009      	b.n	800063a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	3301      	adds	r3, #1
 8000630:	b299      	uxth	r1, r3
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800063a:	897b      	ldrh	r3, [r7, #10]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	ddbc      	ble.n	80005c6 <button_Scan+0x36>
	  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020c00 	.word	0x40020c00
 800065c:	20000098 	.word	0x20000098
 8000660:	20000204 	.word	0x20000204
 8000664:	200000f4 	.word	0x200000f4

08000668 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800066c:	201e      	movs	r0, #30
 800066e:	f001 ffdd 	bl	800262c <DEC2BCD>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <ds3231_init+0x80>)
 8000678:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800067a:	2016      	movs	r0, #22
 800067c:	f001 ffd6 	bl	800262c <DEC2BCD>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <ds3231_init+0x80>)
 8000686:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000688:	2015      	movs	r0, #21
 800068a:	f001 ffcf 	bl	800262c <DEC2BCD>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <ds3231_init+0x80>)
 8000694:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000696:	2006      	movs	r0, #6
 8000698:	f001 ffc8 	bl	800262c <DEC2BCD>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <ds3231_init+0x80>)
 80006a2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80006a4:	200f      	movs	r0, #15
 80006a6:	f001 ffc1 	bl	800262c <DEC2BCD>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <ds3231_init+0x80>)
 80006b0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006b2:	2009      	movs	r0, #9
 80006b4:	f001 ffba 	bl	800262c <DEC2BCD>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <ds3231_init+0x80>)
 80006be:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006c0:	2017      	movs	r0, #23
 80006c2:	f001 ffb3 	bl	800262c <DEC2BCD>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <ds3231_init+0x80>)
 80006cc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006ce:	2332      	movs	r3, #50	; 0x32
 80006d0:	2203      	movs	r2, #3
 80006d2:	21d0      	movs	r1, #208	; 0xd0
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <ds3231_init+0x84>)
 80006d6:	f002 ffb9 	bl	800364c <HAL_I2C_IsDeviceReady>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d000      	beq.n	80006e2 <ds3231_init+0x7a>
		while(1);
 80006e0:	e7fe      	b.n	80006e0 <ds3231_init+0x78>
	};
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	20000174 	.word	0x20000174

080006f0 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	4618      	mov	r0, r3
 8000704:	f001 ff92 	bl	800262c <DEC2BCD>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	b29a      	uxth	r2, r3
 8000710:	230a      	movs	r3, #10
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2301      	movs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	f107 030f 	add.w	r3, r7, #15
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	21d0      	movs	r1, #208	; 0xd0
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <ds3231_Write+0x40>)
 8000724:	f002 fc72 	bl	800300c <HAL_I2C_Mem_Write>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000174 	.word	0x20000174

08000734 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800073a:	230a      	movs	r3, #10
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2307      	movs	r3, #7
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2200      	movs	r2, #0
 800074a:	21d0      	movs	r1, #208	; 0xd0
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <ds3231_ReadTime+0xa8>)
 800074e:	f002 fd57 	bl	8003200 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f001 ff4e 	bl	80025f8 <BCD2DEC>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <ds3231_ReadTime+0xac>)
 8000762:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	4618      	mov	r0, r3
 800076a:	f001 ff45 	bl	80025f8 <BCD2DEC>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <ds3231_ReadTime+0xb0>)
 8000774:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	4618      	mov	r0, r3
 800077c:	f001 ff3c 	bl	80025f8 <BCD2DEC>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <ds3231_ReadTime+0xb4>)
 8000786:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <ds3231_ReadTime+0xa4>)
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	4618      	mov	r0, r3
 800078e:	f001 ff33 	bl	80025f8 <BCD2DEC>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ds3231_ReadTime+0xb8>)
 8000798:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ds3231_ReadTime+0xa4>)
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 ff2a 	bl	80025f8 <BCD2DEC>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <ds3231_ReadTime+0xbc>)
 80007aa:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <ds3231_ReadTime+0xa4>)
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 ff21 	bl	80025f8 <BCD2DEC>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <ds3231_ReadTime+0xc0>)
 80007bc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <ds3231_ReadTime+0xa4>)
 80007c0:	799b      	ldrb	r3, [r3, #6]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 ff18 	bl	80025f8 <BCD2DEC>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <ds3231_ReadTime+0xc4>)
 80007ce:	701a      	strb	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	20000174 	.word	0x20000174
 80007e0:	20000114 	.word	0x20000114
 80007e4:	20000116 	.word	0x20000116
 80007e8:	20000119 	.word	0x20000119
 80007ec:	20000118 	.word	0x20000118
 80007f0:	20000117 	.word	0x20000117
 80007f4:	2000011a 	.word	0x2000011a
 80007f8:	20000115 	.word	0x20000115

080007fc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_FSMC_Init+0xec>)
 800082a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800082e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_FSMC_Init+0xf0>)
 8000834:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_FSMC_Init+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_FSMC_Init+0xec>)
 800084a:	2210      	movs	r2, #16
 800084c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_FSMC_Init+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_FSMC_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_FSMC_Init+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800088e:	230f      	movs	r3, #15
 8000890:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000892:	230f      	movs	r3, #15
 8000894:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000896:	233c      	movs	r3, #60	; 0x3c
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800089e:	2310      	movs	r3, #16
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008a2:	2311      	movs	r3, #17
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008aa:	2308      	movs	r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008ae:	230f      	movs	r3, #15
 80008b0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008be:	2311      	movs	r3, #17
 80008c0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008c6:	463a      	mov	r2, r7
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_FSMC_Init+0xec>)
 80008d0:	f004 fd4e 	bl	8005370 <HAL_SRAM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008da:	f001 f841 	bl	8001960 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008de:	bf00      	nop
 80008e0:	3738      	adds	r7, #56	; 0x38
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124
 80008ec:	a0000104 	.word	0xa0000104

080008f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_FSMC_MspInit+0x88>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d131      	bne.n	8000970 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_FSMC_MspInit+0x88>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6393      	str	r3, [r2, #56]	; 0x38
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 8000924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800092e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000932:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000940:	230c      	movs	r3, #12
 8000942:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <HAL_FSMC_MspInit+0x90>)
 800094a:	f002 f865 	bl	8002a18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800094e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000952:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000960:	230c      	movs	r3, #12
 8000962:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_FSMC_MspInit+0x94>)
 800096a:	f002 f855 	bl	8002a18 <HAL_GPIO_Init>
 800096e:	e000      	b.n	8000972 <HAL_FSMC_MspInit+0x82>
    return;
 8000970:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000009c 	.word	0x2000009c
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020c00 	.word	0x40020c00

08000988 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000990:	f7ff ffae 	bl	80008f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b60      	ldr	r3, [pc, #384]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a5f      	ldr	r2, [pc, #380]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a58      	ldr	r2, [pc, #352]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b56      	ldr	r3, [pc, #344]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a51      	ldr	r2, [pc, #324]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <MX_GPIO_Init+0x19c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a3c      	ldr	r2, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a35      	ldr	r2, [pc, #212]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <MX_GPIO_Init+0x19c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|DEBUG_LED_2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2130      	movs	r1, #48	; 0x30
 8000a7a:	4830      	ldr	r0, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a7c:	f002 f968 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	482e      	ldr	r0, [pc, #184]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000a88:	f002 f962 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	482c      	ldr	r0, [pc, #176]	; (8000b44 <MX_GPIO_Init+0x1a8>)
 8000a94:	f002 f95c 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	482a      	ldr	r0, [pc, #168]	; (8000b48 <MX_GPIO_Init+0x1ac>)
 8000a9e:	f002 f957 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|DEBUG_LED_2_Pin;
 8000aa2:	2330      	movs	r3, #48	; 0x30
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4820      	ldr	r0, [pc, #128]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000aba:	f001 ffad 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000ad8:	f001 ff9e 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <MX_GPIO_Init+0x1b0>)
 8000af0:	f001 ff92 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_GPIO_Init+0x1a8>)
 8000b0e:	f001 ff83 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b12:	2308      	movs	r3, #8
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_GPIO_Init+0x1ac>)
 8000b2a:	f001 ff75 	bl	8002a18 <HAL_GPIO_Init>

}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021800 	.word	0x40021800

08000b50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f002 f8f9 	bl	8002d84 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fee2 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_I2C_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <HAL_I2C_MspInit+0x8c>)
 8000c06:	f001 ff07 	bl	8002a18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <LCD_WR_REG+0x1c>)
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	8013      	strh	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	600ffffe 	.word	0x600ffffe

08000c5c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <LCD_WR_DATA+0x1c>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	8053      	strh	r3, [r2, #2]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	600ffffe 	.word	0x600ffffe

08000c7c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <LCD_RD_DATA+0x20>)
 8000c84:	885b      	ldrh	r3, [r3, #2]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	b29b      	uxth	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	600ffffe 	.word	0x600ffffe

08000ca0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	80fb      	strh	r3, [r7, #6]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	807b      	strh	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cbe:	202a      	movs	r0, #42	; 0x2a
 8000cc0:	f7ff ffbc 	bl	8000c3c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffc6 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffc0 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffba 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffb4 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000cf4:	202b      	movs	r0, #43	; 0x2b
 8000cf6:	f7ff ffa1 	bl	8000c3c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffab 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ffa5 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d12:	883b      	ldrh	r3, [r7, #0]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff9f 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff99 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f7ff ff86 	bl	8000c3c <LCD_WR_REG>
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}

08000d38 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <lcd_Clear+0x70>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <lcd_Clear+0x70>)
 8000d5c:	885b      	ldrh	r3, [r3, #2]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff ff9b 	bl	8000ca0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	81fb      	strh	r3, [r7, #14]
 8000d6e:	e011      	b.n	8000d94 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	81bb      	strh	r3, [r7, #12]
 8000d74:	e006      	b.n	8000d84 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff6f 	bl	8000c5c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d7e:	89bb      	ldrh	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	81bb      	strh	r3, [r7, #12]
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <lcd_Clear+0x70>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	89ba      	ldrh	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3f3      	bcc.n	8000d76 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	81fb      	strh	r3, [r7, #14]
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <lcd_Clear+0x70>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	89fa      	ldrh	r2, [r7, #14]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3e8      	bcc.n	8000d70 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001c8 	.word	0x200001c8

08000dac <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	88b9      	ldrh	r1, [r7, #4]
 8000dc4:	88f8      	ldrh	r0, [r7, #6]
 8000dc6:	f7ff ff6b 	bl	8000ca0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff45 	bl	8000c5c <LCD_WR_DATA>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <lcd_displayCurrentMode>:
			yerr-=distance;
			uCol+=incy;
		}
	}
}
void lcd_displayCurrentMode(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af04      	add	r7, sp, #16
	char str1[64];
	sprintf(str1,"     CURRENT MODE: %02d     ", CURRENT_MODE);
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <lcd_displayCurrentMode+0x38>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	463b      	mov	r3, r7
 8000de8:	490b      	ldr	r1, [pc, #44]	; (8000e18 <lcd_displayCurrentMode+0x3c>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 f888 	bl	8005f00 <siprintf>
	lcd_StrCenter(0, 80, (char*)str1, WHITE, BLUE, 16, 0);
 8000df0:	463a      	mov	r2, r7
 8000df2:	2300      	movs	r3, #0
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2310      	movs	r3, #16
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e02:	2150      	movs	r1, #80	; 0x50
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fb5b 	bl	80014c0 <lcd_StrCenter>
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	; 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	08006774 	.word	0x08006774

08000e1c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	70fb      	strb	r3, [r7, #3]
 8000e36:	4613      	mov	r3, r2
 8000e38:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	fb12 f303 	smulbb	r3, r2, r3
 8000e72:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	3b01      	subs	r3, #1
 8000e86:	b29c      	uxth	r4, r3
 8000e88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	88b9      	ldrh	r1, [r7, #4]
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	f7ff feff 	bl	8000ca0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	827b      	strh	r3, [r7, #18]
 8000ea6:	e07a      	b.n	8000f9e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eac:	2b0c      	cmp	r3, #12
 8000eae:	d028      	beq.n	8000f02 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d108      	bne.n	8000eca <lcd_ShowChar+0xae>
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	8a7b      	ldrh	r3, [r7, #18]
 8000ebc:	493c      	ldr	r1, [pc, #240]	; (8000fb0 <lcd_ShowChar+0x194>)
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	440a      	add	r2, r1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	75fb      	strb	r3, [r7, #23]
 8000ec8:	e01b      	b.n	8000f02 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000eca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ece:	2b18      	cmp	r3, #24
 8000ed0:	d10b      	bne.n	8000eea <lcd_ShowChar+0xce>
 8000ed2:	78fa      	ldrb	r2, [r7, #3]
 8000ed4:	8a79      	ldrh	r1, [r7, #18]
 8000ed6:	4837      	ldr	r0, [pc, #220]	; (8000fb4 <lcd_ShowChar+0x198>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4403      	add	r3, r0
 8000ee2:	440b      	add	r3, r1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	75fb      	strb	r3, [r7, #23]
 8000ee8:	e00b      	b.n	8000f02 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eee:	2b20      	cmp	r3, #32
 8000ef0:	d15a      	bne.n	8000fa8 <lcd_ShowChar+0x18c>
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	8a7b      	ldrh	r3, [r7, #18]
 8000ef6:	4930      	ldr	r1, [pc, #192]	; (8000fb8 <lcd_ShowChar+0x19c>)
 8000ef8:	0192      	lsls	r2, r2, #6
 8000efa:	440a      	add	r2, r1
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	75bb      	strb	r3, [r7, #22]
 8000f06:	e044      	b.n	8000f92 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d120      	bne.n	8000f52 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f10:	7dfa      	ldrb	r2, [r7, #23]
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <lcd_ShowChar+0x10e>
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe9a 	bl	8000c5c <LCD_WR_DATA>
 8000f28:	e003      	b.n	8000f32 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe95 	bl	8000c5c <LCD_WR_DATA>
				m++;
 8000f32:	7d7b      	ldrb	r3, [r7, #21]
 8000f34:	3301      	adds	r3, #1
 8000f36:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f38:	7d7b      	ldrb	r3, [r7, #21]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f40:	fb02 f201 	mul.w	r2, r2, r1
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11f      	bne.n	8000f8c <lcd_ShowChar+0x170>
				{
					m=0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	757b      	strb	r3, [r7, #21]
					break;
 8000f50:	e022      	b.n	8000f98 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7dbb      	ldrb	r3, [r7, #22]
 8000f56:	fa42 f303 	asr.w	r3, r2, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <lcd_ShowChar+0x152>
 8000f62:	883a      	ldrh	r2, [r7, #0]
 8000f64:	88b9      	ldrh	r1, [r7, #4]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff1f 	bl	8000dac <lcd_DrawPoint>
				x++;
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	3301      	adds	r3, #1
 8000f72:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	8a3b      	ldrh	r3, [r7, #16]
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d105      	bne.n	8000f8c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f80:	8a3b      	ldrh	r3, [r7, #16]
 8000f82:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	3301      	adds	r3, #1
 8000f88:	80bb      	strh	r3, [r7, #4]
					break;
 8000f8a:	e005      	b.n	8000f98 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f8c:	7dbb      	ldrb	r3, [r7, #22]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75bb      	strb	r3, [r7, #22]
 8000f92:	7dbb      	ldrb	r3, [r7, #22]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	d9b7      	bls.n	8000f08 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f98:	8a7b      	ldrh	r3, [r7, #18]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	827b      	strh	r3, [r7, #18]
 8000f9e:	8a7a      	ldrh	r2, [r7, #18]
 8000fa0:	89bb      	ldrh	r3, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d380      	bcc.n	8000ea8 <lcd_ShowChar+0x8c>
 8000fa6:	e000      	b.n	8000faa <lcd_ShowChar+0x18e>
		else return;
 8000fa8:	bf00      	nop
				}
			}
		}
	}
}
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	080067b4 	.word	0x080067b4
 8000fb4:	08006da4 	.word	0x08006da4
 8000fb8:	08007f74 	.word	0x08007f74

08000fbc <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fd0:	e004      	b.n	8000fdc <mypow+0x20>
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	71ba      	strb	r2, [r7, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f5      	bne.n	8000fd2 <mypow+0x16>
	return result;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001012:	2300      	movs	r3, #0
 8001014:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e059      	b.n	80010d8 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001024:	887c      	ldrh	r4, [r7, #2]
 8001026:	787a      	ldrb	r2, [r7, #1]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	200a      	movs	r0, #10
 8001036:	f7ff ffc1 	bl	8000fbc <mypow>
 800103a:	4603      	mov	r3, r0
 800103c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <lcd_ShowIntNum+0xf8>)
 8001042:	fba3 2301 	umull	r2, r3, r3, r1
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1aca      	subs	r2, r1, r3
 8001052:	4613      	mov	r3, r2
 8001054:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d121      	bne.n	80010a0 <lcd_ShowIntNum+0xac>
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	3b01      	subs	r3, #1
 8001062:	429a      	cmp	r2, r3
 8001064:	da1c      	bge.n	80010a0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d117      	bne.n	800109c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	b29a      	uxth	r2, r3
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	b29b      	uxth	r3, r3
 8001074:	fb12 f303 	smulbb	r3, r2, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4413      	add	r3, r2
 800107e:	b298      	uxth	r0, r3
 8001080:	8c3a      	ldrh	r2, [r7, #32]
 8001082:	88b9      	ldrh	r1, [r7, #4]
 8001084:	2300      	movs	r3, #0
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	2220      	movs	r2, #32
 8001096:	f7ff fec1 	bl	8000e1c <lcd_ShowChar>
				continue;
 800109a:	e01a      	b.n	80010d2 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800109c:	2301      	movs	r3, #1
 800109e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	fb12 f303 	smulbb	r3, r2, r3
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4413      	add	r3, r2
 80010b2:	b298      	uxth	r0, r3
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	3330      	adds	r3, #48	; 0x30
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	8c3c      	ldrh	r4, [r7, #32]
 80010bc:	88b9      	ldrh	r1, [r7, #4]
 80010be:	2300      	movs	r3, #0
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4623      	mov	r3, r4
 80010ce:	f7ff fea5 	bl	8000e1c <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	787b      	ldrb	r3, [r7, #1]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3a1      	bcc.n	8001024 <lcd_ShowIntNum+0x30>
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	cccccccd 	.word	0xcccccccd

080010f0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <lcd_SetDir+0x44>)
 800110c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001110:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <lcd_SetDir+0x44>)
 8001114:	22f0      	movs	r2, #240	; 0xf0
 8001116:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001118:	e006      	b.n	8001128 <lcd_SetDir+0x38>
		lcddev.width=240;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <lcd_SetDir+0x44>)
 800111c:	22f0      	movs	r2, #240	; 0xf0
 800111e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <lcd_SetDir+0x44>)
 8001122:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001126:	805a      	strh	r2, [r3, #2]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	200001c8 	.word	0x200001c8

08001138 <lcd_init>:


void lcd_init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	48aa      	ldr	r0, [pc, #680]	; (80013ec <lcd_init+0x2b4>)
 8001144:	f001 fe04 	bl	8002d50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114c:	f001 fb2e 	bl	80027ac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001156:	48a5      	ldr	r0, [pc, #660]	; (80013ec <lcd_init+0x2b4>)
 8001158:	f001 fdfa 	bl	8002d50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f001 fb24 	bl	80027ac <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ffc3 	bl	80010f0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800116a:	20d3      	movs	r0, #211	; 0xd3
 800116c:	f7ff fd66 	bl	8000c3c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001170:	f7ff fd84 	bl	8000c7c <LCD_RD_DATA>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b9d      	ldr	r3, [pc, #628]	; (80013f0 <lcd_init+0x2b8>)
 800117a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800117c:	f7ff fd7e 	bl	8000c7c <LCD_RD_DATA>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b9a      	ldr	r3, [pc, #616]	; (80013f0 <lcd_init+0x2b8>)
 8001186:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001188:	f7ff fd78 	bl	8000c7c <LCD_RD_DATA>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <lcd_init+0x2b8>)
 8001192:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001194:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <lcd_init+0x2b8>)
 8001196:	889b      	ldrh	r3, [r3, #4]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <lcd_init+0x2b8>)
 800119e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011a0:	f7ff fd6c 	bl	8000c7c <LCD_RD_DATA>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b91      	ldr	r3, [pc, #580]	; (80013f0 <lcd_init+0x2b8>)
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <lcd_init+0x2b8>)
 80011b2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011b4:	20cf      	movs	r0, #207	; 0xcf
 80011b6:	f7ff fd41 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fd4e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011c0:	20c1      	movs	r0, #193	; 0xc1
 80011c2:	f7ff fd4b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011c6:	2030      	movs	r0, #48	; 0x30
 80011c8:	f7ff fd48 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011cc:	20ed      	movs	r0, #237	; 0xed
 80011ce:	f7ff fd35 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f7ff fd42 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff fd3f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011de:	2012      	movs	r0, #18
 80011e0:	f7ff fd3c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011e4:	2081      	movs	r0, #129	; 0x81
 80011e6:	f7ff fd39 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011ea:	20e8      	movs	r0, #232	; 0xe8
 80011ec:	f7ff fd26 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011f0:	2085      	movs	r0, #133	; 0x85
 80011f2:	f7ff fd33 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fd30 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011fc:	207a      	movs	r0, #122	; 0x7a
 80011fe:	f7ff fd2d 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001202:	20cb      	movs	r0, #203	; 0xcb
 8001204:	f7ff fd1a 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001208:	2039      	movs	r0, #57	; 0x39
 800120a:	f7ff fd27 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800120e:	202c      	movs	r0, #44	; 0x2c
 8001210:	f7ff fd24 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fd21 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800121a:	2034      	movs	r0, #52	; 0x34
 800121c:	f7ff fd1e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff fd1b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001226:	20f7      	movs	r0, #247	; 0xf7
 8001228:	f7ff fd08 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800122c:	2020      	movs	r0, #32
 800122e:	f7ff fd15 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001232:	20ea      	movs	r0, #234	; 0xea
 8001234:	f7ff fd02 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fd0f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fd0c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001244:	20c0      	movs	r0, #192	; 0xc0
 8001246:	f7ff fcf9 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800124a:	201b      	movs	r0, #27
 800124c:	f7ff fd06 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001250:	20c1      	movs	r0, #193	; 0xc1
 8001252:	f7ff fcf3 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff fd00 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800125c:	20c5      	movs	r0, #197	; 0xc5
 800125e:	f7ff fced 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001262:	2030      	movs	r0, #48	; 0x30
 8001264:	f7ff fcfa 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001268:	2030      	movs	r0, #48	; 0x30
 800126a:	f7ff fcf7 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800126e:	20c7      	movs	r0, #199	; 0xc7
 8001270:	f7ff fce4 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001274:	20b7      	movs	r0, #183	; 0xb7
 8001276:	f7ff fcf1 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800127a:	2036      	movs	r0, #54	; 0x36
 800127c:	f7ff fcde 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001280:	2008      	movs	r0, #8
 8001282:	f7ff fceb 	bl	8000c5c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001286:	203a      	movs	r0, #58	; 0x3a
 8001288:	f7ff fcd8 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800128c:	2055      	movs	r0, #85	; 0x55
 800128e:	f7ff fce5 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001292:	20b1      	movs	r0, #177	; 0xb1
 8001294:	f7ff fcd2 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fcdf 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800129e:	201a      	movs	r0, #26
 80012a0:	f7ff fcdc 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012a4:	20b6      	movs	r0, #182	; 0xb6
 80012a6:	f7ff fcc9 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff fcd6 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012b0:	20a2      	movs	r0, #162	; 0xa2
 80012b2:	f7ff fcd3 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012b6:	20f2      	movs	r0, #242	; 0xf2
 80012b8:	f7ff fcc0 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fccd 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012c2:	2026      	movs	r0, #38	; 0x26
 80012c4:	f7ff fcba 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fcc7 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012ce:	20e0      	movs	r0, #224	; 0xe0
 80012d0:	f7ff fcb4 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012d4:	200f      	movs	r0, #15
 80012d6:	f7ff fcc1 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012da:	202a      	movs	r0, #42	; 0x2a
 80012dc:	f7ff fcbe 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012e0:	2028      	movs	r0, #40	; 0x28
 80012e2:	f7ff fcbb 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012e6:	2008      	movs	r0, #8
 80012e8:	f7ff fcb8 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012ec:	200e      	movs	r0, #14
 80012ee:	f7ff fcb5 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012f2:	2008      	movs	r0, #8
 80012f4:	f7ff fcb2 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012f8:	2054      	movs	r0, #84	; 0x54
 80012fa:	f7ff fcaf 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012fe:	20a9      	movs	r0, #169	; 0xa9
 8001300:	f7ff fcac 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001304:	2043      	movs	r0, #67	; 0x43
 8001306:	f7ff fca9 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800130a:	200a      	movs	r0, #10
 800130c:	f7ff fca6 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001310:	200f      	movs	r0, #15
 8001312:	f7ff fca3 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fca0 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fc9d 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fc9a 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fc97 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800132e:	20e1      	movs	r0, #225	; 0xe1
 8001330:	f7ff fc84 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fc91 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800133a:	2015      	movs	r0, #21
 800133c:	f7ff fc8e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001340:	2017      	movs	r0, #23
 8001342:	f7ff fc8b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001346:	2007      	movs	r0, #7
 8001348:	f7ff fc88 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800134c:	2011      	movs	r0, #17
 800134e:	f7ff fc85 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001352:	2006      	movs	r0, #6
 8001354:	f7ff fc82 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001358:	202b      	movs	r0, #43	; 0x2b
 800135a:	f7ff fc7f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800135e:	2056      	movs	r0, #86	; 0x56
 8001360:	f7ff fc7c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001364:	203c      	movs	r0, #60	; 0x3c
 8001366:	f7ff fc79 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800136a:	2005      	movs	r0, #5
 800136c:	f7ff fc76 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001370:	2010      	movs	r0, #16
 8001372:	f7ff fc73 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001376:	200f      	movs	r0, #15
 8001378:	f7ff fc70 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800137c:	203f      	movs	r0, #63	; 0x3f
 800137e:	f7ff fc6d 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001382:	203f      	movs	r0, #63	; 0x3f
 8001384:	f7ff fc6a 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001388:	200f      	movs	r0, #15
 800138a:	f7ff fc67 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800138e:	202b      	movs	r0, #43	; 0x2b
 8001390:	f7ff fc54 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fc61 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fc5e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fc5b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013a6:	203f      	movs	r0, #63	; 0x3f
 80013a8:	f7ff fc58 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013ac:	202a      	movs	r0, #42	; 0x2a
 80013ae:	f7ff fc45 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fc52 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fc4f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fc4c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013c4:	20ef      	movs	r0, #239	; 0xef
 80013c6:	f7ff fc49 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013ca:	2011      	movs	r0, #17
 80013cc:	f7ff fc36 	bl	8000c3c <LCD_WR_REG>
	HAL_Delay(120);
 80013d0:	2078      	movs	r0, #120	; 0x78
 80013d2:	f001 f9eb 	bl	80027ac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013d6:	2029      	movs	r0, #41	; 0x29
 80013d8:	f7ff fc30 	bl	8000c3c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <lcd_init+0x2bc>)
 80013e4:	f001 fcb4 	bl	8002d50 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020800 	.word	0x40020800
 80013f0:	200001c8 	.word	0x200001c8
 80013f4:	40020000 	.word	0x40020000

080013f8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	461a      	mov	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	81fb      	strh	r3, [r7, #14]
 8001406:	460b      	mov	r3, r1
 8001408:	81bb      	strh	r3, [r7, #12]
 800140a:	4613      	mov	r3, r2
 800140c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001416:	e048      	b.n	80014aa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d145      	bne.n	80014aa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <lcd_ShowStr+0xc4>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	429a      	cmp	r2, r3
 8001432:	dc3f      	bgt.n	80014b4 <lcd_ShowStr+0xbc>
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <lcd_ShowStr+0xc4>)
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	4619      	mov	r1, r3
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001440:	1acb      	subs	r3, r1, r3
 8001442:	429a      	cmp	r2, r3
 8001444:	dc36      	bgt.n	80014b4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b80      	cmp	r3, #128	; 0x80
 800144c:	d902      	bls.n	8001454 <lcd_ShowStr+0x5c>
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	e02a      	b.n	80014aa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b0d      	cmp	r3, #13
 800145a:	d10b      	bne.n	8001474 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800145c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001460:	b29a      	uxth	r2, r3
 8001462:	89bb      	ldrh	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	81fb      	strh	r3, [r7, #14]
					str++;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	e017      	b.n	80014a4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	88fc      	ldrh	r4, [r7, #6]
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	89f8      	ldrh	r0, [r7, #14]
 800147e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	f7ff fcc4 	bl	8000e1c <lcd_ShowChar>
					x+=sizey/2;
 8001494:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	4413      	add	r3, r2
 80014a2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1b2      	bne.n	8001418 <lcd_ShowStr+0x20>
 80014b2:	e000      	b.n	80014b6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014b4:	bf00      	nop
			}
		}
	}
}
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	200001c8 	.word	0x200001c8

080014c0 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	81fb      	strh	r3, [r7, #14]
 80014ce:	460b      	mov	r3, r1
 80014d0:	81bb      	strh	r3, [r7, #12]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f7fe fe7a 	bl	80001d0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <lcd_StrCenter+0x60>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	8afb      	ldrh	r3, [r7, #22]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	0fda      	lsrs	r2, r3, #31
 80014ee:	4413      	add	r3, r2
 80014f0:	105b      	asrs	r3, r3, #1
 80014f2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014f4:	89fa      	ldrh	r2, [r7, #14]
 80014f6:	8abb      	ldrh	r3, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	b298      	uxth	r0, r3
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	89b9      	ldrh	r1, [r7, #12]
 8001500:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	8c3b      	ldrh	r3, [r7, #32]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f7ff ff70 	bl	80013f8 <lcd_ShowStr>
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001c8 	.word	0x200001c8

08001524 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <led7_init+0x14>)
 800152e:	f001 fc0f 	bl	8002d50 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021800 	.word	0x40021800

0800153c <led7_Scan>:

void led7_Scan(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <led7_Scan+0x104>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <led7_Scan+0x104>)
 800154a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800154c:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <led7_Scan+0x108>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a3d      	ldr	r2, [pc, #244]	; (8001648 <led7_Scan+0x10c>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <led7_Scan+0x104>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <led7_Scan+0x104>)
 8001566:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <led7_Scan+0x108>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d847      	bhi.n	8001600 <led7_Scan+0xc4>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <led7_Scan+0x3c>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001589 	.word	0x08001589
 800157c:	080015a7 	.word	0x080015a7
 8001580:	080015c5 	.word	0x080015c5
 8001584:	080015e3 	.word	0x080015e3
	case 0:
		spi_buffer |= 0x00b0;
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <led7_Scan+0x104>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <led7_Scan+0x104>)
 8001594:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <led7_Scan+0x104>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <led7_Scan+0x104>)
 80015a2:	801a      	strh	r2, [r3, #0]
		break;
 80015a4:	e02d      	b.n	8001602 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <led7_Scan+0x104>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <led7_Scan+0x104>)
 80015b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <led7_Scan+0x104>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f023 0320 	bic.w	r3, r3, #32
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <led7_Scan+0x104>)
 80015c0:	801a      	strh	r2, [r3, #0]
		break;
 80015c2:	e01e      	b.n	8001602 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <led7_Scan+0x104>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <led7_Scan+0x104>)
 80015d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <led7_Scan+0x104>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f023 0310 	bic.w	r3, r3, #16
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <led7_Scan+0x104>)
 80015de:	801a      	strh	r2, [r3, #0]
		break;
 80015e0:	e00f      	b.n	8001602 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <led7_Scan+0x104>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <led7_Scan+0x104>)
 80015ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <led7_Scan+0x104>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <led7_Scan+0x104>)
 80015fc:	801a      	strh	r2, [r3, #0]
		break;
 80015fe:	e000      	b.n	8001602 <led7_Scan+0xc6>
	default:
		break;
 8001600:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <led7_Scan+0x108>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	425a      	negs	r2, r3
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	bf58      	it	pl
 8001614:	4253      	negpl	r3, r2
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <led7_Scan+0x108>)
 8001618:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <led7_Scan+0x110>)
 8001620:	f001 fb96 	bl	8002d50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001624:	2301      	movs	r3, #1
 8001626:	2202      	movs	r2, #2
 8001628:	4905      	ldr	r1, [pc, #20]	; (8001640 <led7_Scan+0x104>)
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <led7_Scan+0x114>)
 800162c:	f003 f981 	bl	8004932 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	2140      	movs	r1, #64	; 0x40
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <led7_Scan+0x110>)
 8001636:	f001 fb8b 	bl	8002d50 <HAL_GPIO_WritePin>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000004 	.word	0x20000004
 8001644:	200000a0 	.word	0x200000a0
 8001648:	20000000 	.word	0x20000000
 800164c:	40021800 	.word	0x40021800
 8001650:	20000204 	.word	0x20000204

08001654 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800165a:	f001 f835 	bl	80026c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800165e:	f000 f8fd 	bl	800185c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001662:	f7ff f99b 	bl	800099c <MX_GPIO_Init>
	MX_TIM2_Init();
 8001666:	f000 ff55 	bl	8002514 <MX_TIM2_Init>
	MX_SPI1_Init();
 800166a:	f000 fe31 	bl	80022d0 <MX_SPI1_Init>
	MX_FSMC_Init();
 800166e:	f7ff f8c5 	bl	80007fc <MX_FSMC_Init>
	MX_I2C1_Init();
 8001672:	f7ff fa6d 	bl	8000b50 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8001676:	f000 f95b 	bl	8001930 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fb5c 	bl	8000d38 <lcd_Clear>
	updateCurrent(23, 11, 23, 5, 8, 0, 0);
 8001680:	2300      	movs	r3, #0
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2300      	movs	r3, #0
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2308      	movs	r3, #8
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2305      	movs	r3, #5
 800168e:	2217      	movs	r2, #23
 8001690:	210b      	movs	r1, #11
 8001692:	2017      	movs	r0, #23
 8001694:	f000 f96a 	bl	800196c <updateCurrent>
	setTimer1(1000);
 8001698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800169c:	f000 fd2e 	bl	80020fc <setTimer1>
	int tmpValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
	while (1) {
		while (!flag_timer2)
 80016a4:	bf00      	nop
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <main+0x1e0>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0fb      	beq.n	80016a6 <main+0x52>
			;
		flag_timer2 = 0;
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <main+0x1e0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
		button_Scan();
 80016b4:	f7fe ff6c 	bl	8000590 <button_Scan>

		// mode
		if(button_count[11] == 2){
 80016b8:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <main+0x1e4>)
 80016ba:	8adb      	ldrh	r3, [r3, #22]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d156      	bne.n	800176e <main+0x11a>
			if(tmpValue != 0){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d047      	beq.n	8001756 <main+0x102>
				// if change mode while modifying => remove temp value
				if(CURRENT_MODIFIER == 1){
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <main+0x1e8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <main+0x8a>
					tmpValue = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
					CURRENT_HOUR -= tmpValue;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <main+0x1ec>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a59      	ldr	r2, [pc, #356]	; (8001840 <main+0x1ec>)
 80016dc:	6013      	str	r3, [r2, #0]
				}
				if(CURRENT_MODIFIER == 2){
 80016de:	4b57      	ldr	r3, [pc, #348]	; (800183c <main+0x1e8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <main+0xa2>
					tmpValue = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
					CURRENT_MINUTE -= tmpValue;
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <main+0x1f0>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	4a54      	ldr	r2, [pc, #336]	; (8001844 <main+0x1f0>)
 80016f4:	6013      	str	r3, [r2, #0]
				}
				if(CURRENT_MODIFIER == 3){
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <main+0x1e8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <main+0xba>
					tmpValue = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
					CURRENT_SEC -= tmpValue;
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <main+0x1f4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <main+0x1f4>)
 800170c:	6013      	str	r3, [r2, #0]
				}
				if(CURRENT_MODIFIER == 4){
 800170e:	4b4b      	ldr	r3, [pc, #300]	; (800183c <main+0x1e8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d107      	bne.n	8001726 <main+0xd2>
					tmpValue = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
					CURRENT_DATE -= tmpValue;
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <main+0x1f8>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4a4a      	ldr	r2, [pc, #296]	; (800184c <main+0x1f8>)
 8001724:	6013      	str	r3, [r2, #0]
				}
				if(CURRENT_MODIFIER == 5){
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <main+0x1e8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d107      	bne.n	800173e <main+0xea>
					tmpValue = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
					CURRENT_MONTH -= tmpValue;
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <main+0x1fc>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	4a45      	ldr	r2, [pc, #276]	; (8001850 <main+0x1fc>)
 800173c:	6013      	str	r3, [r2, #0]
				}
				if(CURRENT_MODIFIER == 6){
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <main+0x1e8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b06      	cmp	r3, #6
 8001744:	d107      	bne.n	8001756 <main+0x102>
					tmpValue = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
					CURRENT_YEAR -= tmpValue;
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <main+0x200>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <main+0x200>)
 8001754:	6013      	str	r3, [r2, #0]
				}
			}
			CURRENT_MODE++;
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <main+0x204>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <main+0x204>)
 800175e:	6013      	str	r3, [r2, #0]
			if(CURRENT_MODE > 2){
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <main+0x204>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b02      	cmp	r3, #2
 8001766:	dd02      	ble.n	800176e <main+0x11a>
				CURRENT_MODE = 0;
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <main+0x204>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
			}
		}
		//tang gia tri
		if(button_count[0] == 2){
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <main+0x1e4>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d147      	bne.n	8001806 <main+0x1b2>
			if(CURRENT_MODIFIER == 1){
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <main+0x1e8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <main+0x13a>
				tmpValue++;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
				CURRENT_HOUR++;
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <main+0x1ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <main+0x1ec>)
 800178c:	6013      	str	r3, [r2, #0]
			}
			if(CURRENT_MODIFIER == 2){
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <main+0x1e8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <main+0x152>
				tmpValue++;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
				CURRENT_MINUTE++;
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <main+0x1f0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <main+0x1f0>)
 80017a4:	6013      	str	r3, [r2, #0]
			}
			if(CURRENT_MODIFIER == 3){
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <main+0x1e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <main+0x16a>
				tmpValue++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
				CURRENT_SEC++;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <main+0x1f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a23      	ldr	r2, [pc, #140]	; (8001848 <main+0x1f4>)
 80017bc:	6013      	str	r3, [r2, #0]
			}
			if(CURRENT_MODIFIER == 4){
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <main+0x1e8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d107      	bne.n	80017d6 <main+0x182>
				tmpValue++;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
				CURRENT_DATE++;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <main+0x1f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <main+0x1f8>)
 80017d4:	6013      	str	r3, [r2, #0]
			}
			if(CURRENT_MODIFIER == 5){
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <main+0x1e8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d107      	bne.n	80017ee <main+0x19a>
				tmpValue++;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
				CURRENT_MONTH++;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <main+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <main+0x1fc>)
 80017ec:	6013      	str	r3, [r2, #0]
			}
			if(CURRENT_MODIFIER == 6){
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <main+0x1e8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d107      	bne.n	8001806 <main+0x1b2>
				tmpValue++;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3301      	adds	r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
				CURRENT_YEAR++;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <main+0x200>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <main+0x200>)
 8001804:	6013      	str	r3, [r2, #0]
			}
		}
		//save
		if(button_count[3] == 2){
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <main+0x1e4>)
 8001808:	88db      	ldrh	r3, [r3, #6]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d10d      	bne.n	800182a <main+0x1d6>
			CURRENT_MODIFIER++;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <main+0x1e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <main+0x1e8>)
 8001816:	6013      	str	r3, [r2, #0]
			tmpValue = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
			if (CURRENT_MODIFIER >= 6){
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <main+0x1e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b05      	cmp	r3, #5
 8001822:	dd02      	ble.n	800182a <main+0x1d6>
				CURRENT_MODIFIER = 1;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <main+0x1e8>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
			}
		}
		TimerStateMachine();
 800182a:	f000 fc39 	bl	80020a0 <TimerStateMachine>
		displayCurrentMode();
 800182e:	f000 fc55 	bl	80020dc <displayCurrentMode>
		while (!flag_timer2)
 8001832:	e737      	b.n	80016a4 <main+0x50>
 8001834:	200000ca 	.word	0x200000ca
 8001838:	200000f4 	.word	0x200000f4
 800183c:	200000a8 	.word	0x200000a8
 8001840:	200000bc 	.word	0x200000bc
 8001844:	200000c0 	.word	0x200000c0
 8001848:	200000c4 	.word	0x200000c4
 800184c:	200000b4 	.word	0x200000b4
 8001850:	200000b0 	.word	0x200000b0
 8001854:	200000ac 	.word	0x200000ac
 8001858:	200000a4 	.word	0x200000a4

0800185c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	; 0x50
 8001860:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2230      	movs	r2, #48	; 0x30
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fb40 	bl	8005ef0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xcc>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <SystemClock_Config+0xcc>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <SystemClock_Config+0xcc>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <SystemClock_Config+0xd0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <SystemClock_Config+0xd0>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SystemClock_Config+0xd0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2310      	movs	r3, #16
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80018cc:	2308      	movs	r3, #8
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80018d0:	23a8      	movs	r3, #168	; 0xa8
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018d8:	2304      	movs	r3, #4
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018dc:	f107 0320 	add.w	r3, r7, #32
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fb3d 	bl	8003f60 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x94>
		Error_Handler();
 80018ec:	f000 f838 	bl	8001960 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001900:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001906:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2105      	movs	r1, #5
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fd9e 	bl	8004450 <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xc2>
		Error_Handler();
 800191a:	f000 f821 	bl	8001960 <Error_Handler>
	}
}
 800191e:	bf00      	nop
 8001920:	3750      	adds	r7, #80	; 0x50
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
//	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2110      	movs	r1, #16
 8001938:	4808      	ldr	r0, [pc, #32]	; (800195c <system_init+0x2c>)
 800193a:	f001 fa09 	bl	8002d50 <HAL_GPIO_WritePin>
	timer_init();
 800193e:	f000 fbd3 	bl	80020e8 <timer_init>
	led7_init();
 8001942:	f7ff fdef 	bl	8001524 <led7_init>
	button_init();
 8001946:	f7fe fe17 	bl	8000578 <button_init>
	lcd_init();
 800194a:	f7ff fbf5 	bl	8001138 <lcd_init>
	ds3231_init();
 800194e:	f7fe fe8b 	bl	8000668 <ds3231_init>
	setTimer2(50);
 8001952:	2032      	movs	r0, #50	; 0x32
 8001954:	f000 fbee 	bl	8002134 <setTimer2>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001968:	e7fe      	b.n	8001968 <Error_Handler+0x8>
	...

0800196c <updateCurrent>:
int CURRENT_MINUTE = 0;
int CURRENT_SEC = 0;

int current_state = HOUR_MODIFER;

void updateCurrent(int year, int month, int date, int day, int hour, int minute, int sec){
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
	CURRENT_YEAR = year;
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <updateCurrent+0x44>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6013      	str	r3, [r2, #0]
	CURRENT_MONTH = month;
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <updateCurrent+0x48>)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	6013      	str	r3, [r2, #0]
	CURRENT_DATE = date;
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <updateCurrent+0x4c>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6013      	str	r3, [r2, #0]
	CURRENT_DAY = day;
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <updateCurrent+0x50>)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6013      	str	r3, [r2, #0]
	CURRENT_HOUR = hour;
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <updateCurrent+0x54>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6013      	str	r3, [r2, #0]
	CURRENT_MINUTE = minute;
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <updateCurrent+0x58>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	6013      	str	r3, [r2, #0]
	CURRENT_SEC = sec;
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <updateCurrent+0x5c>)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	200000ac 	.word	0x200000ac
 80019b4:	200000b0 	.word	0x200000b0
 80019b8:	200000b4 	.word	0x200000b4
 80019bc:	200000b8 	.word	0x200000b8
 80019c0:	200000bc 	.word	0x200000bc
 80019c4:	200000c0 	.word	0x200000c0
 80019c8:	200000c4 	.word	0x200000c4

080019cc <timeCounter>:


void timeCounter(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	if(flag_timer1 == 1){
 80019d0:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <timeCounter+0xfc>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d148      	bne.n	8001a6a <timeCounter+0x9e>
		CURRENT_SEC++;
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <timeCounter+0x100>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <timeCounter+0x100>)
 80019e0:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e6:	f000 fb89 	bl	80020fc <setTimer1>
		if(CURRENT_SEC==60){
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <timeCounter+0x100>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b3c      	cmp	r3, #60	; 0x3c
 80019f0:	d107      	bne.n	8001a02 <timeCounter+0x36>
			CURRENT_MINUTE++;
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <timeCounter+0x104>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a35      	ldr	r2, [pc, #212]	; (8001ad0 <timeCounter+0x104>)
 80019fa:	6013      	str	r3, [r2, #0]
			CURRENT_SEC=0;
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <timeCounter+0x100>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_MINUTE == 60) {
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <timeCounter+0x104>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b3c      	cmp	r3, #60	; 0x3c
 8001a08:	d107      	bne.n	8001a1a <timeCounter+0x4e>
			CURRENT_HOUR++;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <timeCounter+0x108>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <timeCounter+0x108>)
 8001a12:	6013      	str	r3, [r2, #0]
			CURRENT_MINUTE = 0;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <timeCounter+0x104>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_HOUR == 24) {
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <timeCounter+0x108>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d107      	bne.n	8001a32 <timeCounter+0x66>
			CURRENT_DATE++;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <timeCounter+0x10c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <timeCounter+0x10c>)
 8001a2a:	6013      	str	r3, [r2, #0]
			CURRENT_HOUR = 0;
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <timeCounter+0x108>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_DATE >= 30){
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <timeCounter+0x10c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b1d      	cmp	r3, #29
 8001a38:	dd07      	ble.n	8001a4a <timeCounter+0x7e>
			CURRENT_MONTH++;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <timeCounter+0x110>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <timeCounter+0x110>)
 8001a42:	6013      	str	r3, [r2, #0]
			CURRENT_DATE = 1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <timeCounter+0x10c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_MONTH >12){
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <timeCounter+0x110>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	dd04      	ble.n	8001a5c <timeCounter+0x90>
			CURRENT_YEAR++;
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <timeCounter+0x114>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <timeCounter+0x114>)
 8001a5a:	6013      	str	r3, [r2, #0]
		}
		if(CURRENT_YEAR > 99){
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <timeCounter+0x114>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b63      	cmp	r3, #99	; 0x63
 8001a62:	dd02      	ble.n	8001a6a <timeCounter+0x9e>
			CURRENT_YEAR = 0;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <timeCounter+0x114>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		}

	}
	ds3231_Write(ADDRESS_YEAR, CURRENT_YEAR);
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <timeCounter+0x114>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	2006      	movs	r0, #6
 8001a74:	f7fe fe3c 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, CURRENT_MONTH);
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <timeCounter+0x110>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2005      	movs	r0, #5
 8001a82:	f7fe fe35 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, CURRENT_DATE);
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <timeCounter+0x10c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2004      	movs	r0, #4
 8001a90:	f7fe fe2e 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, CURRENT_HOUR);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <timeCounter+0x108>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7fe fe27 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, CURRENT_MINUTE);
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <timeCounter+0x104>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7fe fe20 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, CURRENT_SEC);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <timeCounter+0x100>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7fe fe19 	bl	80006f0 <ds3231_Write>

	ds3231_ReadTime();
 8001abe:	f7fe fe39 	bl	8000734 <ds3231_ReadTime>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000c8 	.word	0x200000c8
 8001acc:	200000c4 	.word	0x200000c4
 8001ad0:	200000c0 	.word	0x200000c0
 8001ad4:	200000bc 	.word	0x200000bc
 8001ad8:	200000b4 	.word	0x200000b4
 8001adc:	200000b0 	.word	0x200000b0
 8001ae0:	200000ac 	.word	0x200000ac

08001ae4 <displayTime>:

void displayTime() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <displayTime+0xc0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2318      	movs	r3, #24
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2302      	movs	r3, #2
 8001b00:	2164      	movs	r1, #100	; 0x64
 8001b02:	2046      	movs	r0, #70	; 0x46
 8001b04:	f7ff fa76 	bl	8000ff4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <displayTime+0xc4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	2318      	movs	r3, #24
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2300      	movs	r3, #0
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2164      	movs	r1, #100	; 0x64
 8001b20:	206e      	movs	r0, #110	; 0x6e
 8001b22:	f7ff fa67 	bl	8000ff4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <displayTime+0xc8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2318      	movs	r3, #24
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2164      	movs	r1, #100	; 0x64
 8001b3e:	2096      	movs	r0, #150	; 0x96
 8001b40:	f7ff fa58 	bl	8000ff4 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <displayTime+0xcc>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	2318      	movs	r3, #24
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	2182      	movs	r1, #130	; 0x82
 8001b5c:	2046      	movs	r0, #70	; 0x46
 8001b5e:	f7ff fa49 	bl	8000ff4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <displayTime+0xd0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	2318      	movs	r3, #24
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2302      	movs	r3, #2
 8001b78:	2182      	movs	r1, #130	; 0x82
 8001b7a:	206e      	movs	r0, #110	; 0x6e
 8001b7c:	f7ff fa3a 	bl	8000ff4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <displayTime+0xd4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	2318      	movs	r3, #24
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2302      	movs	r3, #2
 8001b96:	2182      	movs	r1, #130	; 0x82
 8001b98:	2096      	movs	r0, #150	; 0x96
 8001b9a:	f7ff fa2b 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000119 	.word	0x20000119
 8001ba8:	20000116 	.word	0x20000116
 8001bac:	20000114 	.word	0x20000114
 8001bb0:	20000117 	.word	0x20000117
 8001bb4:	2000011a 	.word	0x2000011a
 8001bb8:	20000115 	.word	0x20000115

08001bbc <turnOffNumber>:
void turnOffNumber(int number) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	6078      	str	r0, [r7, #4]
	if(number == HOUR_MODIFER){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10e      	bne.n	8001be8 <turnOffNumber+0x2c>
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <turnOffNumber+0xe8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	2318      	movs	r3, #24
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	2164      	movs	r1, #100	; 0x64
 8001be0:	2046      	movs	r0, #70	; 0x46
 8001be2:	f7ff fa07 	bl	8000ff4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
	}
	else if(number == YEAR_MODIFER){
		lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
	}
}
 8001be6:	e058      	b.n	8001c9a <turnOffNumber+0xde>
	else if (number == MIN_MODIFER){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d10e      	bne.n	8001c0c <turnOffNumber+0x50>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <turnOffNumber+0xec>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2302      	movs	r3, #2
 8001c02:	2164      	movs	r1, #100	; 0x64
 8001c04:	206e      	movs	r0, #110	; 0x6e
 8001c06:	f7ff f9f5 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001c0a:	e046      	b.n	8001c9a <turnOffNumber+0xde>
	else if (number == SEC_MODIFER){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d10e      	bne.n	8001c30 <turnOffNumber+0x74>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <turnOffNumber+0xf0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	2318      	movs	r3, #24
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	2164      	movs	r1, #100	; 0x64
 8001c28:	2096      	movs	r0, #150	; 0x96
 8001c2a:	f7ff f9e3 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001c2e:	e034      	b.n	8001c9a <turnOffNumber+0xde>
	else if (number == DATE_MODIFER){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d10e      	bne.n	8001c54 <turnOffNumber+0x98>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <turnOffNumber+0xf4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	2318      	movs	r3, #24
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	2182      	movs	r1, #130	; 0x82
 8001c4c:	2046      	movs	r0, #70	; 0x46
 8001c4e:	f7ff f9d1 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001c52:	e022      	b.n	8001c9a <turnOffNumber+0xde>
	else if(number == MONTH_MODIFER){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10e      	bne.n	8001c78 <turnOffNumber+0xbc>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <turnOffNumber+0xf8>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2318      	movs	r3, #24
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	2182      	movs	r1, #130	; 0x82
 8001c70:	206e      	movs	r0, #110	; 0x6e
 8001c72:	f7ff f9bf 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001c76:	e010      	b.n	8001c9a <turnOffNumber+0xde>
	else if(number == YEAR_MODIFER){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d10d      	bne.n	8001c9a <turnOffNumber+0xde>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <turnOffNumber+0xfc>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2318      	movs	r3, #24
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2302      	movs	r3, #2
 8001c92:	2182      	movs	r1, #130	; 0x82
 8001c94:	2096      	movs	r0, #150	; 0x96
 8001c96:	f7ff f9ad 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000119 	.word	0x20000119
 8001ca8:	20000116 	.word	0x20000116
 8001cac:	20000114 	.word	0x20000114
 8001cb0:	20000117 	.word	0x20000117
 8001cb4:	2000011a 	.word	0x2000011a
 8001cb8:	20000115 	.word	0x20000115

08001cbc <turnOnNumber>:
void turnOnNumber(int number) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	6078      	str	r0, [r7, #4]
	if(number == HOUR_MODIFER){
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10f      	bne.n	8001cea <turnOnNumber+0x2e>
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <turnOnNumber+0xf4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	2318      	movs	r3, #24
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	2164      	movs	r1, #100	; 0x64
 8001ce2:	2046      	movs	r0, #70	; 0x46
 8001ce4:	f7ff f986 	bl	8000ff4 <lcd_ShowIntNum>
	}
	else if(number == YEAR_MODIFER){
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
	}

}
 8001ce8:	e05d      	b.n	8001da6 <turnOnNumber+0xea>
	else if (number == MIN_MODIFER){
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d10f      	bne.n	8001d10 <turnOnNumber+0x54>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <turnOnNumber+0xf8>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	2318      	movs	r3, #24
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2302      	movs	r3, #2
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	206e      	movs	r0, #110	; 0x6e
 8001d0a:	f7ff f973 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001d0e:	e04a      	b.n	8001da6 <turnOnNumber+0xea>
	else if (number == SEC_MODIFER){
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d10f      	bne.n	8001d36 <turnOnNumber+0x7a>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <turnOnNumber+0xfc>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2318      	movs	r3, #24
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	2164      	movs	r1, #100	; 0x64
 8001d2e:	2096      	movs	r0, #150	; 0x96
 8001d30:	f7ff f960 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001d34:	e037      	b.n	8001da6 <turnOnNumber+0xea>
	else if (number == DATE_MODIFER){
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d10f      	bne.n	8001d5c <turnOnNumber+0xa0>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <turnOnNumber+0x100>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	2318      	movs	r3, #24
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	2182      	movs	r1, #130	; 0x82
 8001d54:	2046      	movs	r0, #70	; 0x46
 8001d56:	f7ff f94d 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001d5a:	e024      	b.n	8001da6 <turnOnNumber+0xea>
	else if(number == MONTH_MODIFER){
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d10f      	bne.n	8001d82 <turnOnNumber+0xc6>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <turnOnNumber+0x104>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2318      	movs	r3, #24
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2302      	movs	r3, #2
 8001d78:	2182      	movs	r1, #130	; 0x82
 8001d7a:	206e      	movs	r0, #110	; 0x6e
 8001d7c:	f7ff f93a 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001d80:	e011      	b.n	8001da6 <turnOnNumber+0xea>
	else if(number == YEAR_MODIFER){
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d10e      	bne.n	8001da6 <turnOnNumber+0xea>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <turnOnNumber+0x108>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2318      	movs	r3, #24
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2182      	movs	r1, #130	; 0x82
 8001da0:	2096      	movs	r0, #150	; 0x96
 8001da2:	f7ff f927 	bl	8000ff4 <lcd_ShowIntNum>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000119 	.word	0x20000119
 8001db4:	20000116 	.word	0x20000116
 8001db8:	20000114 	.word	0x20000114
 8001dbc:	20000117 	.word	0x20000117
 8001dc0:	2000011a 	.word	0x2000011a
 8001dc4:	20000115 	.word	0x20000115

08001dc8 <timerModifier>:

void timerModifier(){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	switch(CURRENT_MODIFIER) {
 8001dcc:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <timerModifier+0x150>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	f200 809e 	bhi.w	8001f12 <timerModifier+0x14a>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <timerModifier+0x14>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e2d 	.word	0x08001e2d
 8001de4:	08001e4f 	.word	0x08001e4f
 8001de8:	08001e71 	.word	0x08001e71
 8001dec:	08001e93 	.word	0x08001e93
 8001df0:	08001eb5 	.word	0x08001eb5
 8001df4:	08001ed7 	.word	0x08001ed7
 8001df8:	08001e0b 	.word	0x08001e0b
	case INIT:
		setTimer3(250);
 8001dfc:	20fa      	movs	r0, #250	; 0xfa
 8001dfe:	f000 f9b5 	bl	800216c <setTimer3>
		CURRENT_MODIFIER = WAIT;
 8001e02:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <timerModifier+0x150>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
		break;
 8001e08:	e083      	b.n	8001f12 <timerModifier+0x14a>
	case WAIT:
		turnOffNumber(current_state);
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <timerModifier+0x154>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fed4 	bl	8001bbc <turnOffNumber>
		if(flag_timer3 == 1){
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <timerModifier+0x158>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d16d      	bne.n	8001ef8 <timerModifier+0x130>
			setTimer3(250);
 8001e1c:	20fa      	movs	r0, #250	; 0xfa
 8001e1e:	f000 f9a5 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = current_state; // wait FOR 250ms then change state
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <timerModifier+0x154>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <timerModifier+0x150>)
 8001e28:	6013      	str	r3, [r2, #0]
		}
		break;
 8001e2a:	e065      	b.n	8001ef8 <timerModifier+0x130>
	case HOUR_MODIFER:
		turnOnNumber(HOUR_MODIFER);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff ff45 	bl	8001cbc <turnOnNumber>
		current_state = HOUR_MODIFER;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <timerModifier+0x154>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <timerModifier+0x158>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d15d      	bne.n	8001efc <timerModifier+0x134>
			setTimer3(250);//change state HOUR -> MIN
 8001e40:	20fa      	movs	r0, #250	; 0xfa
 8001e42:	f000 f993 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <timerModifier+0x150>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
		}
		break;
 8001e4c:	e056      	b.n	8001efc <timerModifier+0x134>
	case MIN_MODIFER:
		turnOnNumber(MIN_MODIFER);
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7ff ff34 	bl	8001cbc <turnOnNumber>
		current_state = MIN_MODIFER;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <timerModifier+0x154>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <timerModifier+0x158>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d14e      	bne.n	8001f00 <timerModifier+0x138>
			setTimer3(250);//change state HOUR -> MIN
 8001e62:	20fa      	movs	r0, #250	; 0xfa
 8001e64:	f000 f982 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <timerModifier+0x150>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	601a      	str	r2, [r3, #0]
		}
		break;
 8001e6e:	e047      	b.n	8001f00 <timerModifier+0x138>

	case SEC_MODIFER:
		turnOnNumber(SEC_MODIFER);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f7ff ff23 	bl	8001cbc <turnOnNumber>
		current_state = SEC_MODIFER;
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <timerModifier+0x154>)
 8001e78:	2203      	movs	r2, #3
 8001e7a:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <timerModifier+0x158>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d13f      	bne.n	8001f04 <timerModifier+0x13c>
			setTimer3(250);//change state HOUR -> MIN
 8001e84:	20fa      	movs	r0, #250	; 0xfa
 8001e86:	f000 f971 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <timerModifier+0x150>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001e90:	e038      	b.n	8001f04 <timerModifier+0x13c>
	case DATE_MODIFER:
		turnOnNumber(DATE_MODIFER);
 8001e92:	2004      	movs	r0, #4
 8001e94:	f7ff ff12 	bl	8001cbc <turnOnNumber>
		current_state = DATE_MODIFER;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <timerModifier+0x154>)
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <timerModifier+0x158>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d130      	bne.n	8001f08 <timerModifier+0x140>
			setTimer3(250);//change state HOUR -> MIN
 8001ea6:	20fa      	movs	r0, #250	; 0xfa
 8001ea8:	f000 f960 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <timerModifier+0x150>)
 8001eae:	2207      	movs	r2, #7
 8001eb0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001eb2:	e029      	b.n	8001f08 <timerModifier+0x140>
	case MONTH_MODIFER:
		turnOnNumber(MONTH_MODIFER);
 8001eb4:	2005      	movs	r0, #5
 8001eb6:	f7ff ff01 	bl	8001cbc <turnOnNumber>
		current_state = MONTH_MODIFER;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <timerModifier+0x154>)
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <timerModifier+0x158>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d121      	bne.n	8001f0c <timerModifier+0x144>
			setTimer3(250);//change state HOUR -> MIN
 8001ec8:	20fa      	movs	r0, #250	; 0xfa
 8001eca:	f000 f94f 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <timerModifier+0x150>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ed4:	e01a      	b.n	8001f0c <timerModifier+0x144>

	case YEAR_MODIFER:
		turnOnNumber(MONTH_MODIFER);
 8001ed6:	2005      	movs	r0, #5
 8001ed8:	f7ff fef0 	bl	8001cbc <turnOnNumber>
		current_state = MONTH_MODIFER;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <timerModifier+0x154>)
 8001ede:	2205      	movs	r2, #5
 8001ee0:	601a      	str	r2, [r3, #0]
		if(flag_timer3 == 1){
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <timerModifier+0x158>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d112      	bne.n	8001f10 <timerModifier+0x148>
			setTimer3(250);//change state HOUR -> MIN
 8001eea:	20fa      	movs	r0, #250	; 0xfa
 8001eec:	f000 f93e 	bl	800216c <setTimer3>
			CURRENT_MODIFIER = WAIT;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <timerModifier+0x150>)
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ef6:	e00b      	b.n	8001f10 <timerModifier+0x148>
		break;
 8001ef8:	bf00      	nop
 8001efa:	e00a      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001efc:	bf00      	nop
 8001efe:	e008      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001f00:	bf00      	nop
 8001f02:	e006      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001f04:	bf00      	nop
 8001f06:	e004      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001f08:	bf00      	nop
 8001f0a:	e002      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001f0c:	bf00      	nop
 8001f0e:	e000      	b.n	8001f12 <timerModifier+0x14a>
		break;
 8001f10:	bf00      	nop
	}
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200000a8 	.word	0x200000a8
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200000cc 	.word	0x200000cc

08001f24 <timerCountDown>:


void timerCountDown(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af04      	add	r7, sp, #16
	if(flag_timer1 == 1){
 8001f2a:	4b55      	ldr	r3, [pc, #340]	; (8002080 <timerCountDown+0x15c>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d141      	bne.n	8001fb6 <timerCountDown+0x92>
		CURRENT_SEC--;
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <timerCountDown+0x160>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <timerCountDown+0x160>)
 8001f3a:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 8001f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f40:	f000 f8dc 	bl	80020fc <setTimer1>
		if(CURRENT_SEC== 0){
 8001f44:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <timerCountDown+0x160>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <timerCountDown+0x38>
			CURRENT_MINUTE++;
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <timerCountDown+0x164>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <timerCountDown+0x164>)
 8001f54:	6013      	str	r3, [r2, #0]
			CURRENT_SEC= 59;
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <timerCountDown+0x160>)
 8001f58:	223b      	movs	r2, #59	; 0x3b
 8001f5a:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_MINUTE == 0) {
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <timerCountDown+0x164>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <timerCountDown+0x50>
			CURRENT_HOUR++;
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <timerCountDown+0x168>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a48      	ldr	r2, [pc, #288]	; (800208c <timerCountDown+0x168>)
 8001f6c:	6013      	str	r3, [r2, #0]
			CURRENT_MINUTE = 59;
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <timerCountDown+0x164>)
 8001f70:	223b      	movs	r2, #59	; 0x3b
 8001f72:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_HOUR == 0) {
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <timerCountDown+0x168>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <timerCountDown+0x68>
			CURRENT_DATE++;
 8001f7c:	4b44      	ldr	r3, [pc, #272]	; (8002090 <timerCountDown+0x16c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a43      	ldr	r2, [pc, #268]	; (8002090 <timerCountDown+0x16c>)
 8001f84:	6013      	str	r3, [r2, #0]
			CURRENT_HOUR = 23;
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <timerCountDown+0x168>)
 8001f88:	2217      	movs	r2, #23
 8001f8a:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_DATE == 0){
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <timerCountDown+0x16c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <timerCountDown+0x80>
			CURRENT_MONTH++;
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <timerCountDown+0x170>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <timerCountDown+0x170>)
 8001f9c:	6013      	str	r3, [r2, #0]
			CURRENT_DATE = 31;
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <timerCountDown+0x16c>)
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	601a      	str	r2, [r3, #0]
		}
		if(CURRENT_MONTH == 0){
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <timerCountDown+0x170>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d104      	bne.n	8001fb6 <timerCountDown+0x92>
			CURRENT_YEAR--;
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <timerCountDown+0x174>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	4a39      	ldr	r2, [pc, #228]	; (8002098 <timerCountDown+0x174>)
 8001fb4:	6013      	str	r3, [r2, #0]
		}
	}
	ds3231_Write(ADDRESS_YEAR, CURRENT_YEAR);
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <timerCountDown+0x174>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2006      	movs	r0, #6
 8001fc0:	f7fe fb96 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, CURRENT_MONTH);
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <timerCountDown+0x170>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2005      	movs	r0, #5
 8001fce:	f7fe fb8f 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, CURRENT_DATE);
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <timerCountDown+0x16c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2004      	movs	r0, #4
 8001fdc:	f7fe fb88 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, CURRENT_HOUR);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <timerCountDown+0x168>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f7fe fb81 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, CURRENT_MINUTE);
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <timerCountDown+0x164>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7fe fb7a 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, CURRENT_SEC);
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <timerCountDown+0x160>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	2000      	movs	r0, #0
 8002006:	f7fe fb73 	bl	80006f0 <ds3231_Write>

	ds3231_ReadTime();
 800200a:	f7fe fb93 	bl	8000734 <ds3231_ReadTime>

	if(CURRENT_SEC + CURRENT_MINUTE + CURRENT_HOUR + CURRENT_DATE + CURRENT_MONTH + CURRENT_YEAR == 0){
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <timerCountDown+0x160>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <timerCountDown+0x164>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	441a      	add	r2, r3
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <timerCountDown+0x168>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	441a      	add	r2, r3
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <timerCountDown+0x16c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	441a      	add	r2, r3
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <timerCountDown+0x170>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	441a      	add	r2, r3
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <timerCountDown+0x174>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d120      	bne.n	8002076 <timerCountDown+0x152>
		for(int i = 0; i< 10;i++){
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	e00a      	b.n	8002050 <timerCountDown+0x12c>
			lcd_Clear(RED);
 800203a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800203e:	f7fe fe7b 	bl	8000d38 <lcd_Clear>
			lcd_Clear(WHITE);
 8002042:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002046:	f7fe fe77 	bl	8000d38 <lcd_Clear>
		for(int i = 0; i< 10;i++){
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3301      	adds	r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b09      	cmp	r3, #9
 8002054:	ddf1      	ble.n	800203a <timerCountDown+0x116>
		}
		lcd_StrCenter(0, 0, "TIME OVER!!!!!!!!", WHITE, BLACK, 24, 1);
 8002056:	2301      	movs	r3, #1
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	2318      	movs	r3, #24
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <timerCountDown+0x178>)
 8002068:	2100      	movs	r1, #0
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fa28 	bl	80014c0 <lcd_StrCenter>
		lcd_Clear(BLACK);
 8002070:	2000      	movs	r0, #0
 8002072:	f7fe fe61 	bl	8000d38 <lcd_Clear>
	}
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000c8 	.word	0x200000c8
 8002084:	200000c4 	.word	0x200000c4
 8002088:	200000c0 	.word	0x200000c0
 800208c:	200000bc 	.word	0x200000bc
 8002090:	200000b4 	.word	0x200000b4
 8002094:	200000b0 	.word	0x200000b0
 8002098:	200000ac 	.word	0x200000ac
 800209c:	080067a0 	.word	0x080067a0

080020a0 <TimerStateMachine>:

void TimerStateMachine() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	displayTime();
 80020a4:	f7ff fd1e 	bl	8001ae4 <displayTime>
	switch(CURRENT_MODE){
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <TimerStateMachine+0x38>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d00c      	beq.n	80020ca <TimerStateMachine+0x2a>
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	dc0d      	bgt.n	80020d0 <TimerStateMachine+0x30>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <TimerStateMachine+0x1e>
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d003      	beq.n	80020c4 <TimerStateMachine+0x24>
			break;
		case 2:
			timerCountDown();
			break;
		default:
			break;
 80020bc:	e008      	b.n	80020d0 <TimerStateMachine+0x30>
			timeCounter();
 80020be:	f7ff fc85 	bl	80019cc <timeCounter>
			break;
 80020c2:	e006      	b.n	80020d2 <TimerStateMachine+0x32>
			timerModifier();
 80020c4:	f7ff fe80 	bl	8001dc8 <timerModifier>
			break;
 80020c8:	e003      	b.n	80020d2 <TimerStateMachine+0x32>
			timerCountDown();
 80020ca:	f7ff ff2b 	bl	8001f24 <timerCountDown>
			break;
 80020ce:	e000      	b.n	80020d2 <TimerStateMachine+0x32>
			break;
 80020d0:	bf00      	nop
	}
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200000a4 	.word	0x200000a4

080020dc <displayCurrentMode>:
void displayCurrentMode(){
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	lcd_displayCurrentMode();
 80020e0:	f7fe fe7c 	bl	8000ddc <lcd_displayCurrentMode>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <timer_init>:
uint16_t timer4_MUL = 0;
uint16_t timer5_MUL = 0;



void timer_init(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <timer_init+0x10>)
 80020ee:	f003 f9d3 	bl	8005498 <HAL_TIM_Base_Start_IT>
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000025c 	.word	0x2000025c

080020fc <setTimer1>:

void setTimer1(uint16_t duration){
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE_1;
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <setTimer1+0x2c>)
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <setTimer1+0x2c>)
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <setTimer1+0x30>)
 8002112:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <setTimer1+0x34>)
 8002116:	2200      	movs	r2, #0
 8002118:	801a      	strh	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200000dc 	.word	0x200000dc
 800212c:	200000d2 	.word	0x200000d2
 8002130:	200000c8 	.word	0x200000c8

08002134 <setTimer2>:

void setTimer2(uint16_t duration){
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <setTimer2+0x2c>)
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <setTimer2+0x2c>)
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <setTimer2+0x30>)
 800214a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <setTimer2+0x34>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200000de 	.word	0x200000de
 8002164:	200000d4 	.word	0x200000d4
 8002168:	200000ca 	.word	0x200000ca

0800216c <setTimer3>:

void setTimer3(uint16_t duration){
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <setTimer3+0x2c>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <setTimer3+0x2c>)
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <setTimer3+0x30>)
 8002182:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <setTimer3+0x34>)
 8002186:	2200      	movs	r2, #0
 8002188:	801a      	strh	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200000de 	.word	0x200000de
 800219c:	200000d4 	.word	0x200000d4
 80021a0:	200000cc 	.word	0x200000cc

080021a4 <HAL_TIM_PeriodElapsedCallback>:
	timer2_MUL = duration/TIMER_CYCLE_2;
	timer2_counter = timer2_MUL;
	flag_timer5 = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d16a      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0xe8>
		if(timer5_counter > 0){
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer5_counter--;
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021c8:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer5 = 1;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021de:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer4_counter > 0){
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer4_counter--;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021f2:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer4 = 1;
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80021fe:	2201      	movs	r2, #1
 8002200:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002208:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer3_counter--;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800221c:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer3 = 1;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002228:	2201      	movs	r2, #1
 800222a:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002232:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer2_counter > 0){
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_TIM_PeriodElapsedCallback+0xba>
			timer2_counter--;
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002246:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer2 = 1;
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002252:	2201      	movs	r2, #1
 8002254:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800225c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer1_counter > 0){
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer1_counter--;
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002270:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0) {
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer1 = 1;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800227c:	2201      	movs	r2, #1
 800227e:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002286:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002288:	f7ff f958 	bl	800153c <led7_Scan>
	}
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200000da 	.word	0x200000da
 8002298:	200000d0 	.word	0x200000d0
 800229c:	200000e4 	.word	0x200000e4
 80022a0:	200000d8 	.word	0x200000d8
 80022a4:	200000ce 	.word	0x200000ce
 80022a8:	200000e2 	.word	0x200000e2
 80022ac:	200000d6 	.word	0x200000d6
 80022b0:	200000cc 	.word	0x200000cc
 80022b4:	200000e0 	.word	0x200000e0
 80022b8:	200000d4 	.word	0x200000d4
 80022bc:	200000ca 	.word	0x200000ca
 80022c0:	200000de 	.word	0x200000de
 80022c4:	200000d2 	.word	0x200000d2
 80022c8:	200000c8 	.word	0x200000c8
 80022cc:	200000dc 	.word	0x200000dc

080022d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <MX_SPI1_Init+0x64>)
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <MX_SPI1_Init+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <MX_SPI1_Init+0x64>)
 80022dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_SPI1_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_SPI1_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_SPI1_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_SPI1_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_SPI1_Init+0x64>)
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_SPI1_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <MX_SPI1_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_SPI1_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <MX_SPI1_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_SPI1_Init+0x64>)
 800231c:	220a      	movs	r2, #10
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_SPI1_Init+0x64>)
 8002322:	f002 fa7d 	bl	8004820 <HAL_SPI_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800232c:	f7ff fb18 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000204 	.word	0x20000204
 8002338:	40013000 	.word	0x40013000

0800233c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_SPI_MspInit+0x84>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12b      	bne.n	80023b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002396:	2338      	movs	r3, #56	; 0x38
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a6:	2305      	movs	r3, #5
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_SPI_MspInit+0x8c>)
 80023b2:	f000 fb31 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40013000 	.word	0x40013000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020400 	.word	0x40020400

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_MspInit+0x4c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_MspInit+0x4c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <NMI_Handler+0x4>

08002422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <MemManage_Handler+0x4>

0800242e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <UsageFault_Handler+0x4>

0800243a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002468:	f000 f980 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM2_IRQHandler+0x10>)
 8002476:	f003 f87f 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000025c 	.word	0x2000025c

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f003 fcf2 	bl	8005e9c <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20020000 	.word	0x20020000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	200000e8 	.word	0x200000e8
 80024ec:	200002b8 	.word	0x200002b8

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	463b      	mov	r3, r7
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <MX_TIM2_Init+0x94>)
 800253a:	f240 3247 	movw	r2, #839	; 0x347
 800253e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002548:	2263      	movs	r2, #99	; 0x63
 800254a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_TIM2_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002558:	4813      	ldr	r0, [pc, #76]	; (80025a8 <MX_TIM2_Init+0x94>)
 800255a:	f002 ff4d 	bl	80053f8 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002564:	f7ff f9fc 	bl	8001960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	4619      	mov	r1, r3
 8002574:	480c      	ldr	r0, [pc, #48]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002576:	f003 f907 	bl	8005788 <HAL_TIM_ConfigClockSource>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002580:	f7ff f9ee 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258c:	463b      	mov	r3, r7
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002592:	f003 fb23 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800259c:	f7ff f9e0 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000025c 	.word	0x2000025c

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d115      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	201c      	movs	r0, #28
 80025e0:	f000 f9e3 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e4:	201c      	movs	r0, #28
 80025e6:	f000 f9fc 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4413      	add	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4413      	add	r3, r2
 800261c:	b2db      	uxtb	r3, r3
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <DEC2BCD+0x44>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	08db      	lsrs	r3, r3, #3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	b258      	sxtb	r0, r3
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <DEC2BCD+0x44>)
 800264a:	fba3 1302 	umull	r1, r3, r3, r2
 800264e:	08d9      	lsrs	r1, r3, #3
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	b25b      	sxtb	r3, r3
 800265e:	4303      	orrs	r3, r0
 8002660:	b25b      	sxtb	r3, r3
 8002662:	b2db      	uxtb	r3, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	cccccccd 	.word	0xcccccccd

08002674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800267a:	490e      	ldr	r1, [pc, #56]	; (80026b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002690:	4c0b      	ldr	r4, [pc, #44]	; (80026c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800269e:	f7ff ff27 	bl	80024f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a2:	f003 fc01 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a6:	f7fe ffd5 	bl	8001654 <main>
  bx  lr    
 80026aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80026b8:	08009790 	.word	0x08009790
  ldr r2, =_sbss
 80026bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80026c0:	200002b8 	.word	0x200002b8

080026c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <HAL_Init+0x40>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_Init+0x40>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_Init+0x40>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 f94f 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	200f      	movs	r0, #15
 80026f8:	f000 f808 	bl	800270c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff fe66 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f967 	bl	80029fe <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 f92f 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	; (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000000c 	.word	0x2000000c
 8002764:	20000014 	.word	0x20000014
 8002768:	20000010 	.word	0x20000010

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000014 	.word	0x20000014
 8002790:	200002a4 	.word	0x200002a4

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200002a4 	.word	0x200002a4

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_Delay+0x44>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000014 	.word	0x20000014

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e16b      	b.n	8002d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 815a 	bne.w	8002d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b4 	beq.w	8002d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b60      	ldr	r3, [pc, #384]	; (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	; (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_GPIO_Init+0x30c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_GPIO_Init+0x310>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_GPIO_Init+0x314>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	; (8002d30 <HAL_GPIO_Init+0x318>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_GPIO_Init+0x31c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_GPIO_Init+0x328>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4c      	ldr	r2, [pc, #304]	; (8002d44 <HAL_GPIO_Init+0x32c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_GPIO_Init+0x330>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x20a>
 8002c1e:	2307      	movs	r3, #7
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x310>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c82:	4a32      	ldr	r2, [pc, #200]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cac:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae90 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e12b      	b.n	8002fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fefe 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de8:	f001 fd06 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8002dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a81      	ldr	r2, [pc, #516]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d807      	bhi.n	8002e08 <HAL_I2C_Init+0x84>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <HAL_I2C_Init+0x278>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e006      	b.n	8002e16 <HAL_I2C_Init+0x92>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	; (8003000 <HAL_I2C_Init+0x27c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e7      	b.n	8002fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a78      	ldr	r2, [pc, #480]	; (8003004 <HAL_I2C_Init+0x280>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d802      	bhi.n	8002e58 <HAL_I2C_Init+0xd4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	e009      	b.n	8002e6c <HAL_I2C_Init+0xe8>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a69      	ldr	r2, [pc, #420]	; (8003008 <HAL_I2C_Init+0x284>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	495c      	ldr	r1, [pc, #368]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_I2C_Init+0x13c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_I2C_Init+0x138>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e59      	subs	r1, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	e051      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_I2C_Init+0x168>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_I2C_Init+0x18e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x196>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <HAL_I2C_Init+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e58      	subs	r0, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6911      	ldr	r1, [r2, #16]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	000186a0 	.word	0x000186a0
 8002ffc:	001e847f 	.word	0x001e847f
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	431bde83 	.word	0x431bde83
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	460b      	mov	r3, r1
 8003020:	813b      	strh	r3, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003026:	f7ff fbb5 	bl	8002794 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	f040 80d9 	bne.w	80031ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	2201      	movs	r2, #1
 8003042:	496d      	ldr	r1, [pc, #436]	; (80031f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fdad 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
 8003052:	e0cc      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Mem_Write+0x56>
 800305e:	2302      	movs	r3, #2
 8003060:	e0c5      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d007      	beq.n	8003088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2221      	movs	r2, #33	; 0x21
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a4d      	ldr	r2, [pc, #308]	; (80031fc <HAL_I2C_Mem_Write+0x1f0>)
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ca:	88f8      	ldrh	r0, [r7, #6]
 80030cc:	893a      	ldrh	r2, [r7, #8]
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fbe4 	bl	80038a8 <I2C_RequestMemoryWrite>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d052      	beq.n	800318c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e081      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fe2e 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_I2C_Mem_Write+0x180>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1aa      	bne.n	80030ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fe1a 	bl	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e016      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	460b      	mov	r3, r1
 8003214:	813b      	strh	r3, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7ff fabb 	bl	8002794 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 8208 	bne.w	800363e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2319      	movs	r3, #25
 8003234:	2201      	movs	r2, #1
 8003236:	497b      	ldr	r1, [pc, #492]	; (8003424 <HAL_I2C_Mem_Read+0x224>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fcb3 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
 8003246:	e1fb      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Mem_Read+0x56>
 8003252:	2302      	movs	r3, #2
 8003254:	e1f4      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d007      	beq.n	800327c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2222      	movs	r2, #34	; 0x22
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a5b      	ldr	r2, [pc, #364]	; (8003428 <HAL_I2C_Mem_Read+0x228>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032be:	88f8      	ldrh	r0, [r7, #6]
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4603      	mov	r3, r0
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fb80 	bl	80039d4 <I2C_RequestMemoryRead>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1b0      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d113      	bne.n	800330e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e184      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	2b01      	cmp	r3, #1
 8003314:	d11b      	bne.n	800334e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e164      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	2b02      	cmp	r3, #2
 8003354:	d11b      	bne.n	800338e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	e144      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a4:	e138      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	f200 80f1 	bhi.w	8003592 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d123      	bne.n	8003400 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fd49 	bl	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e139      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fe:	e10b      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	d14e      	bne.n	80034a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	2200      	movs	r2, #0
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <HAL_I2C_Mem_Read+0x22c>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fbc6 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e10e      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000
 800342c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a4:	e0b8      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	2200      	movs	r2, #0
 80034ae:	4966      	ldr	r1, [pc, #408]	; (8003648 <HAL_I2C_Mem_Read+0x448>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb77 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0bf      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2200      	movs	r2, #0
 800350a:	494f      	ldr	r1, [pc, #316]	; (8003648 <HAL_I2C_Mem_Read+0x448>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fb49 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e091      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003590:	e042      	b.n	8003618 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fc5c 	bl	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e04c      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d118      	bne.n	8003618 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	f47f aec2 	bne.w	80033a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010004 	.word	0x00010004

0800364c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	460b      	mov	r3, r1
 800365a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff f89a 	bl	8002794 <HAL_GetTick>
 8003660:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	f040 8111 	bne.w	8003896 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2319      	movs	r3, #25
 800367a:	2201      	movs	r2, #1
 800367c:	4988      	ldr	r1, [pc, #544]	; (80038a0 <HAL_I2C_IsDeviceReady+0x254>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fa90 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
 800368c:	e104      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_I2C_IsDeviceReady+0x50>
 8003698:	2302      	movs	r3, #2
 800369a:	e0fd      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d007      	beq.n	80036c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2224      	movs	r2, #36	; 0x24
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a70      	ldr	r2, [pc, #448]	; (80038a4 <HAL_I2C_IsDeviceReady+0x258>)
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fa4e 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371c:	d103      	bne.n	8003726 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0b6      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003738:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800373a:	f7ff f82b 	bl	8002794 <HAL_GetTick>
 800373e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800376e:	e025      	b.n	80037bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7ff f810 	bl	8002794 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <HAL_I2C_IsDeviceReady+0x13a>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22a0      	movs	r2, #160	; 0xa0
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2ba0      	cmp	r3, #160	; 0xa0
 80037c6:	d005      	beq.n	80037d4 <HAL_I2C_IsDeviceReady+0x188>
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_I2C_IsDeviceReady+0x188>
 80037ce:	7dbb      	ldrb	r3, [r7, #22]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0cd      	beq.n	8003770 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d129      	bne.n	800383e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2319      	movs	r3, #25
 8003816:	2201      	movs	r2, #1
 8003818:	4921      	ldr	r1, [pc, #132]	; (80038a0 <HAL_I2C_IsDeviceReady+0x254>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f9c2 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e036      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e02c      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003856:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2319      	movs	r3, #25
 800385e:	2201      	movs	r2, #1
 8003860:	490f      	ldr	r1, [pc, #60]	; (80038a0 <HAL_I2C_IsDeviceReady+0x254>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f99e 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e012      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3301      	adds	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	f4ff af32 	bcc.w	80036e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	00100002 	.word	0x00100002
 80038a4:	ffff0000 	.word	0xffff0000

080038a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2200      	movs	r2, #0
 80038da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f960 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f8:	d103      	bne.n	8003902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e05f      	b.n	80039c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	6a3a      	ldr	r2, [r7, #32]
 800391a:	492d      	ldr	r1, [pc, #180]	; (80039d0 <I2C_RequestMemoryWrite+0x128>)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f998 	bl	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04c      	b.n	80039c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	6a39      	ldr	r1, [r7, #32]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa02 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02b      	b.n	80039c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	e021      	b.n	80039c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003980:	893b      	ldrh	r3, [r7, #8]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29b      	uxth	r3, r3
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	6a39      	ldr	r1, [r7, #32]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f9dc 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d107      	bne.n	80039b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e005      	b.n	80039c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ba:	893b      	ldrh	r3, [r7, #8]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00010002 	.word	0x00010002

080039d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8c2 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a34:	d103      	bne.n	8003a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0aa      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	4952      	ldr	r1, [pc, #328]	; (8003ba0 <I2C_RequestMemoryRead+0x1cc>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f8fa 	bl	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e097      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f964 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e076      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab0:	893b      	ldrh	r3, [r7, #8]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]
 8003aba:	e021      	b.n	8003b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f93e 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e050      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	6a39      	ldr	r1, [r7, #32]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f923 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d107      	bne.n	8003b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e035      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f82b 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b62:	d103      	bne.n	8003b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e013      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <I2C_RequestMemoryRead+0x1cc>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f863 	bl	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	00010002 	.word	0x00010002

08003ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb4:	e025      	b.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d021      	beq.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fe fde9 	bl	8002794 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d116      	bne.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e023      	b.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10d      	bne.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	e00c      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d0b6      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c60:	e051      	b.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d123      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e046      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d021      	beq.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fe fd67 	bl	8002794 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e020      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e00b      	b.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d18d      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5c:	e02d      	b.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f8ce 	bl	8003f00 <I2C_IsAcknowledgeFailed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e02d      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d021      	beq.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe fd0d 	bl	8002794 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e007      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d1ca      	bne.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dde:	e02d      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f88d 	bl	8003f00 <I2C_IsAcknowledgeFailed>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e02d      	b.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d021      	beq.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fe fccc 	bl	8002794 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e007      	b.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d1ca      	bne.n	8003de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e60:	e042      	b.n	8003ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d119      	bne.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e029      	b.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea4:	f7fe fc76 	bl	8002794 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d116      	bne.n	8003ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e007      	b.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d1b5      	bne.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d11b      	bne.n	8003f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e264      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	4ba3      	ldr	r3, [pc, #652]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4ba0      	ldr	r3, [pc, #640]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d112      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b9d      	ldr	r3, [pc, #628]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4b99      	ldr	r3, [pc, #612]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d157      	bne.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e23f      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x74>
 8003fc6:	4b91      	ldr	r3, [pc, #580]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a90      	ldr	r2, [pc, #576]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b8b      	ldr	r3, [pc, #556]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a8a      	ldr	r2, [pc, #552]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a87      	ldr	r2, [pc, #540]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	4b84      	ldr	r3, [pc, #528]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a83      	ldr	r2, [pc, #524]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a80      	ldr	r2, [pc, #512]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fbbc 	bl	8002794 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fe fbb8 	bl	8002794 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e204      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xc0>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe fba8 	bl	8002794 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe fba4 	bl	8002794 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1f0      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b6c      	ldr	r3, [pc, #432]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	4b65      	ldr	r3, [pc, #404]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b62      	ldr	r3, [pc, #392]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1c4      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4952      	ldr	r1, [pc, #328]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <HAL_RCC_OscConfig+0x2b0>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fb5d 	bl	8002794 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7fe fb59 	bl	8002794 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1a5      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4940      	ldr	r1, [pc, #256]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_OscConfig+0x2b0>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fe fb3c 	bl	8002794 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004120:	f7fe fb38 	bl	8002794 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e184      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d030      	beq.n	80041ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b30      	ldr	r3, [pc, #192]	; (8004214 <HAL_RCC_OscConfig+0x2b4>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fe fb1c 	bl	8002794 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7fe fb18 	bl	8002794 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e164      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x200>
 800417e:	e015      	b.n	80041ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_OscConfig+0x2b4>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fe fb05 	bl	8002794 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418e:	f7fe fb01 	bl	8002794 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e14d      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a0 	beq.w	80042fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a0e      	ldr	r2, [pc, #56]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe fac7 	bl	8002794 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e011      	b.n	800422e <HAL_RCC_OscConfig+0x2ce>
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	42470000 	.word	0x42470000
 8004214:	42470e80 	.word	0x42470e80
 8004218:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe faba 	bl	8002794 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e106      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_RCC_OscConfig+0x4e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x2f0>
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	e01c      	b.n	800428a <HAL_RCC_OscConfig+0x32a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x312>
 8004258:	4b7b      	ldr	r3, [pc, #492]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x32a>
 8004272:	4b75      	ldr	r3, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b72      	ldr	r3, [pc, #456]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a71      	ldr	r2, [pc, #452]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fe fa7f 	bl	8002794 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe fa7b 	bl	8002794 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0c5      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RCC_OscConfig+0x33a>
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe fa69 	bl	8002794 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fe fa65 	bl	8002794 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0af      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	4b5a      	ldr	r3, [pc, #360]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ee      	bne.n	80042c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a55      	ldr	r2, [pc, #340]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 809b 	beq.w	800443a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d05c      	beq.n	80043ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d141      	bne.n	800439c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fe fa39 	bl	8002794 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004326:	f7fe fa35 	bl	8002794 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e081      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	019b      	lsls	r3, r3, #6
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	3b01      	subs	r3, #1
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	4937      	ldr	r1, [pc, #220]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fa0e 	bl	8002794 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fe fa0a 	bl	8002794 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e056      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x41c>
 800439a:	e04e      	b.n	800443a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fe f9f7 	bl	8002794 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fe f9f3 	bl	8002794 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e03f      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x44a>
 80043c8:	e037      	b.n	800443a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e032      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d028      	beq.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d11a      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800440c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d107      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40007000 	.word	0x40007000
 8004448:	40023800 	.word	0x40023800
 800444c:	42470060 	.word	0x42470060

08004450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cc      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d90c      	bls.n	800448c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0b8      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	494d      	ldr	r1, [pc, #308]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d044      	beq.n	8004570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d119      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e07f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d003      	beq.n	800450e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	2b03      	cmp	r3, #3
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e067      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4934      	ldr	r1, [pc, #208]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004540:	f7fe f928 	bl	8002794 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fe f924 	bl	8002794 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e04f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d20c      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e032      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4916      	ldr	r1, [pc, #88]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	490e      	ldr	r1, [pc, #56]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d6:	f000 f821 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	490a      	ldr	r1, [pc, #40]	; (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	5ccb      	ldrb	r3, [r1, r3]
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe f888 	bl	800270c <HAL_InitTick>

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023c00 	.word	0x40023c00
 800460c:	40023800 	.word	0x40023800
 8004610:	08009734 	.word	0x08009734
 8004614:	2000000c 	.word	0x2000000c
 8004618:	20000010 	.word	0x20000010

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	2300      	movs	r3, #0
 800462e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004634:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d00d      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x40>
 8004640:	2b08      	cmp	r3, #8
 8004642:	f200 80bd 	bhi.w	80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x34>
 800464a:	2b04      	cmp	r3, #4
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x3a>
 800464e:	e0b7      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004652:	60bb      	str	r3, [r7, #8]
       break;
 8004654:	e0b7      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004656:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004658:	60bb      	str	r3, [r7, #8]
      break;
 800465a:	e0b4      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465c:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004666:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04d      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	ea02 0800 	and.w	r8, r2, r0
 800468a:	ea03 0901 	and.w	r9, r3, r1
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	014b      	lsls	r3, r1, #5
 800469c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046a0:	0142      	lsls	r2, r0, #5
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	ebb0 0008 	subs.w	r0, r0, r8
 80046aa:	eb61 0109 	sbc.w	r1, r1, r9
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	018b      	lsls	r3, r1, #6
 80046b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046bc:	0182      	lsls	r2, r0, #6
 80046be:	1a12      	subs	r2, r2, r0
 80046c0:	eb63 0301 	sbc.w	r3, r3, r1
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	00d9      	lsls	r1, r3, #3
 80046ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d2:	00d0      	lsls	r0, r2, #3
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	eb12 0208 	adds.w	r2, r2, r8
 80046dc:	eb43 0309 	adc.w	r3, r3, r9
 80046e0:	f04f 0000 	mov.w	r0, #0
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	0259      	lsls	r1, r3, #9
 80046ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046ee:	0250      	lsls	r0, r2, #9
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f7fb fdbe 	bl	8000280 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e04a      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	461a      	mov	r2, r3
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	ea02 0400 	and.w	r4, r2, r0
 8004726:	ea03 0501 	and.w	r5, r3, r1
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	014b      	lsls	r3, r1, #5
 8004738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800473c:	0142      	lsls	r2, r0, #5
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	1b00      	subs	r0, r0, r4
 8004744:	eb61 0105 	sbc.w	r1, r1, r5
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	018b      	lsls	r3, r1, #6
 8004752:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004756:	0182      	lsls	r2, r0, #6
 8004758:	1a12      	subs	r2, r2, r0
 800475a:	eb63 0301 	sbc.w	r3, r3, r1
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	00d9      	lsls	r1, r3, #3
 8004768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476c:	00d0      	lsls	r0, r2, #3
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	1912      	adds	r2, r2, r4
 8004774:	eb45 0303 	adc.w	r3, r5, r3
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0299      	lsls	r1, r3, #10
 8004782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004786:	0290      	lsls	r0, r2, #10
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f7fb fd72 	bl	8000280 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047c2:	60bb      	str	r3, [r7, #8]
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	68bb      	ldr	r3, [r7, #8]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00f42400 	.word	0x00f42400
 80047dc:	007a1200 	.word	0x007a1200

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08009744 	.word	0x08009744

08004820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07b      	b.n	800492a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004842:	d009      	beq.n	8004858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
 800484a:	e005      	b.n	8004858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd fd62 	bl	800233c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	ea42 0103 	orr.w	r1, r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	f003 0104 	and.w	r1, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0210 	and.w	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_SPI_Transmit+0x22>
 8004950:	2302      	movs	r3, #2
 8004952:	e126      	b.n	8004ba2 <HAL_SPI_Transmit+0x270>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495c:	f7fd ff1a 	bl	8002794 <HAL_GetTick>
 8004960:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004976:	e10b      	b.n	8004b90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_SPI_Transmit+0x52>
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004988:	e102      	b.n	8004b90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d0:	d10f      	bne.n	80049f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d007      	beq.n	8004a10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a18:	d14b      	bne.n	8004ab2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_Transmit+0xf6>
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d13e      	bne.n	8004aa6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	881a      	ldrh	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a4c:	e02b      	b.n	8004aa6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d112      	bne.n	8004a82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a80:	e011      	b.n	8004aa6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a82:	f7fd fe87 	bl	8002794 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d803      	bhi.n	8004a9a <HAL_SPI_Transmit+0x168>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_Transmit+0x16e>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aa4:	e074      	b.n	8004b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ce      	bne.n	8004a4e <HAL_SPI_Transmit+0x11c>
 8004ab0:	e04c      	b.n	8004b4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x18e>
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d140      	bne.n	8004b42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	7812      	ldrb	r2, [r2, #0]
 8004acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ae6:	e02c      	b.n	8004b42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d113      	bne.n	8004b1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b1c:	e011      	b.n	8004b42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1e:	f7fd fe39 	bl	8002794 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d803      	bhi.n	8004b36 <HAL_SPI_Transmit+0x204>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d102      	bne.n	8004b3c <HAL_SPI_Transmit+0x20a>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b40:	e026      	b.n	8004b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1cd      	bne.n	8004ae8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fbcb 	bl	80052ec <SPI_EndRxTxTransaction>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e000      	b.n	8004b90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b088      	sub	sp, #32
 8004bae:	af02      	add	r7, sp, #8
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc6:	d112      	bne.n	8004bee <HAL_SPI_Receive+0x44>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10e      	bne.n	8004bee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8f1 	bl	8004dcc <HAL_SPI_TransmitReceive>
 8004bea:	4603      	mov	r3, r0
 8004bec:	e0ea      	b.n	8004dc4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Receive+0x52>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0e3      	b.n	8004dc4 <HAL_SPI_Receive+0x21a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c04:	f7fd fdc6 	bl	8002794 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c1a:	e0ca      	b.n	8004db2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Receive+0x7e>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c2c:	e0c1      	b.n	8004db2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2204      	movs	r2, #4
 8004c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d10f      	bne.n	8004c96 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d007      	beq.n	8004cb4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d162      	bne.n	8004d82 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cbc:	e02e      	b.n	8004d1c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d115      	bne.n	8004cf8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f103 020c 	add.w	r2, r3, #12
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf6:	e011      	b.n	8004d1c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf8:	f7fd fd4c 	bl	8002794 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d803      	bhi.n	8004d10 <HAL_SPI_Receive+0x166>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d102      	bne.n	8004d16 <HAL_SPI_Receive+0x16c>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d1a:	e04a      	b.n	8004db2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1cb      	bne.n	8004cbe <HAL_SPI_Receive+0x114>
 8004d26:	e031      	b.n	8004d8c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d113      	bne.n	8004d5e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	b292      	uxth	r2, r2
 8004d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d5c:	e011      	b.n	8004d82 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5e:	f7fd fd19 	bl	8002794 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d803      	bhi.n	8004d76 <HAL_SPI_Receive+0x1cc>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_Receive+0x1d2>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d80:	e017      	b.n	8004db2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1cd      	bne.n	8004d28 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fa45 	bl	8005220 <SPI_EndRxTransaction>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
 8004dae:	e000      	b.n	8004db2 <HAL_SPI_Receive+0x208>
  }

error :
 8004db0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x26>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e18a      	b.n	8005108 <HAL_SPI_TransmitReceive+0x33c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dfa:	f7fd fccb 	bl	8002794 <HAL_GetTick>
 8004dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d00f      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x70>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e22:	d107      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x68>
 8004e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d003      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e3a:	e15b      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_SPI_TransmitReceive+0x82>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_SPI_TransmitReceive+0x82>
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e54:	e14e      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d003      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2205      	movs	r2, #5
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	887a      	ldrh	r2, [r7, #2]
 8004e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	887a      	ldrh	r2, [r7, #2]
 8004e92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d007      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec6:	d178      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x10a>
 8004ed0:	8b7b      	ldrh	r3, [r7, #26]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d166      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004efa:	e053      	b.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d11b      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x176>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d016      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x176>
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d113      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d119      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x1b8>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d014      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	b292      	uxth	r2, r2
 8004f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	1c9a      	adds	r2, r3, #2
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f80:	2301      	movs	r3, #1
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f84:	f7fd fc06 	bl	8002794 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d807      	bhi.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d8>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d003      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fa2:	e0a7      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1a6      	bne.n	8004efc <HAL_SPI_TransmitReceive+0x130>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1a1      	bne.n	8004efc <HAL_SPI_TransmitReceive+0x130>
 8004fb8:	e07c      	b.n	80050b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x1fc>
 8004fc2:	8b7b      	ldrh	r3, [r7, #26]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d16b      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fee:	e057      	b.n	80050a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d11c      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x26c>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x26c>
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d114      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d119      	bne.n	800507a <HAL_SPI_TransmitReceive+0x2ae>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d014      	beq.n	800507a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800507a:	f7fd fb8b 	bl	8002794 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005086:	429a      	cmp	r2, r3
 8005088:	d803      	bhi.n	8005092 <HAL_SPI_TransmitReceive+0x2c6>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d102      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x2cc>
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800509e:	e029      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1a2      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x224>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d19d      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f917 	bl	80052ec <SPI_EndRxTxTransaction>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d006      	beq.n	80050d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050d0:	e010      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	e000      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	; 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005120:	f7fd fb38 	bl	8002794 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4413      	add	r3, r2
 800512e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005130:	f7fd fb30 	bl	8002794 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	015b      	lsls	r3, r3, #5
 800513c:	0d1b      	lsrs	r3, r3, #20
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005146:	e054      	b.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d050      	beq.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005150:	f7fd fb20 	bl	8002794 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	d902      	bls.n	8005166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517e:	d111      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005188:	d004      	beq.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005192:	d107      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ac:	d10f      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e017      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d19b      	bne.n	8005148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005234:	d111      	bne.n	800525a <SPI_EndRxTransaction+0x3a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523e:	d004      	beq.n	800524a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005248:	d107      	bne.n	800525a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005262:	d12a      	bne.n	80052ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d012      	beq.n	8005294 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2200      	movs	r2, #0
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff ff49 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d02d      	beq.n	80052e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e026      	b.n	80052e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	2101      	movs	r1, #1
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff ff36 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01a      	beq.n	80052e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e013      	b.n	80052e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	2101      	movs	r1, #1
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff23 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e000      	b.n	80052e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <SPI_EndRxTxTransaction+0x7c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1b      	ldr	r2, [pc, #108]	; (800536c <SPI_EndRxTxTransaction+0x80>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	0d5b      	lsrs	r3, r3, #21
 8005304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005316:	d112      	bne.n	800533e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff fef4 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e00f      	b.n	800535e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3b01      	subs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d0f2      	beq.n	800533e <SPI_EndRxTxTransaction+0x52>
 8005358:	e000      	b.n	800535c <SPI_EndRxTxTransaction+0x70>
        break;
 800535a:	bf00      	nop
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2000000c 	.word	0x2000000c
 800536c:	165e9f81 	.word	0x165e9f81

08005370 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e034      	b.n	80053f0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7fb faf4 	bl	8000988 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3308      	adds	r3, #8
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fca6 	bl	8005cfc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	f000 fcf0 	bl	8005da0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6858      	ldr	r0, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	f000 fd25 	bl	8005e1c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	6892      	ldr	r2, [r2, #8]
 80053da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6892      	ldr	r2, [r2, #8]
 80053e6:	f041 0101 	orr.w	r1, r1, #1
 80053ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e041      	b.n	800548e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd f8c4 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fa96 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e04e      	b.n	800554e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a23      	ldr	r2, [pc, #140]	; (800555c <HAL_TIM_Base_Start_IT+0xc4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d01d      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_TIM_Base_Start_IT+0xc8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_TIM_Base_Start_IT+0xcc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_TIM_Base_Start_IT+0xd0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_TIM_Base_Start_IT+0xd4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_TIM_Base_Start_IT+0xd8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_TIM_Base_Start_IT+0xdc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d111      	bne.n	800553c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b06      	cmp	r3, #6
 8005528:	d010      	beq.n	800554c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	e007      	b.n	800554c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0202 	mvn.w	r2, #2
 80055a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9b5 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9a7 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9b8 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f98b 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f97d 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f98e 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0208 	mvn.w	r2, #8
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f961 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f953 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f964 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b10      	cmp	r3, #16
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f937 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f929 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f93a 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0201 	mvn.w	r2, #1
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fd54 	bl	80021a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fae0 	bl	8005ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8ff 	bl	8005952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b20      	cmp	r3, #32
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b20      	cmp	r3, #32
 800576e:	d107      	bne.n	8005780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0220 	mvn.w	r2, #32
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 faaa 	bl	8005cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_ConfigClockSource+0x1c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0b4      	b.n	800590e <HAL_TIM_ConfigClockSource+0x186>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057dc:	d03e      	beq.n	800585c <HAL_TIM_ConfigClockSource+0xd4>
 80057de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e2:	f200 8087 	bhi.w	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ea:	f000 8086 	beq.w	80058fa <HAL_TIM_ConfigClockSource+0x172>
 80057ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f2:	d87f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d01a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xa6>
 80057f8:	2b70      	cmp	r3, #112	; 0x70
 80057fa:	d87b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d050      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005800:	2b60      	cmp	r3, #96	; 0x60
 8005802:	d877      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d03c      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0xfa>
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d873      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d058      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d86f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d064      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d86b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d060      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d867      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005828:	2b10      	cmp	r3, #16
 800582a:	d05a      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15a>
 800582c:	e062      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6899      	ldr	r1, [r3, #8]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f000 f9ad 	bl	8005b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	609a      	str	r2, [r3, #8]
      break;
 800585a:	e04f      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6899      	ldr	r1, [r3, #8]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f000 f996 	bl	8005b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587e:	609a      	str	r2, [r3, #8]
      break;
 8005880:	e03c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	f000 f90a 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2150      	movs	r1, #80	; 0x50
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f963 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80058a0:	e02c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 f929 	bl	8005b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2160      	movs	r1, #96	; 0x60
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f953 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80058c0:	e01c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 f8ea 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2140      	movs	r1, #64	; 0x40
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f943 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e00c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f000 f93a 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80058f2:	e003      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      break;
 80058f8:	e000      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d027      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d023      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_Base_SetConfig+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <TIM_Base_SetConfig+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <TIM_Base_SetConfig+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800
 8005a9c:	40001800 	.word	0x40001800
 8005aa0:	40001c00 	.word	0x40001c00
 8005aa4:	40002000 	.word	0x40002000

08005aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0210 	bic.w	r2, r3, #16
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f043 0307 	orr.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e05a      	b.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c40:	d01d      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d10c      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40010400 	.word	0x40010400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40001800 	.word	0x40001800

08005cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d14:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <FSMC_NORSRAM_Init+0xa0>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d26:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005d2c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005d32:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005d38:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005d3e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005d44:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005d4a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005d50:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005d56:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005d5c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005d62:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005d68:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d103      	bne.n	8005d80 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	fff00080 	.word	0xfff00080

08005da0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005dc2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005dce:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005dd6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005dde:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005de8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	3b02      	subs	r3, #2
 8005df0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005df2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6979      	ldr	r1, [r7, #20]
 8005e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e34:	d122      	bne.n	8005e7c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e52:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e5a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e62:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e68:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6979      	ldr	r1, [r7, #20]
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e7a:	e005      	b.n	8005e88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	cff00000 	.word	0xcff00000

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	; (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000018 	.word	0x20000018

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4d0b      	ldr	r5, [pc, #44]	; (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	; (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 fc4e 	bl	800675c <_init>
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08009788 	.word	0x08009788
 8005ee4:	08009788 	.word	0x08009788
 8005ee8:	08009788 	.word	0x08009788
 8005eec:	0800978c 	.word	0x0800978c

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <siprintf>:
 8005f00:	b40e      	push	{r1, r2, r3}
 8005f02:	b500      	push	{lr}
 8005f04:	b09c      	sub	sp, #112	; 0x70
 8005f06:	ab1d      	add	r3, sp, #116	; 0x74
 8005f08:	9002      	str	r0, [sp, #8]
 8005f0a:	9006      	str	r0, [sp, #24]
 8005f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f10:	4809      	ldr	r0, [pc, #36]	; (8005f38 <siprintf+0x38>)
 8005f12:	9107      	str	r1, [sp, #28]
 8005f14:	9104      	str	r1, [sp, #16]
 8005f16:	4909      	ldr	r1, [pc, #36]	; (8005f3c <siprintf+0x3c>)
 8005f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	a902      	add	r1, sp, #8
 8005f24:	f000 f868 	bl	8005ff8 <_svfiprintf_r>
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	b01c      	add	sp, #112	; 0x70
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	b003      	add	sp, #12
 8005f36:	4770      	bx	lr
 8005f38:	20000018 	.word	0x20000018
 8005f3c:	ffff0208 	.word	0xffff0208

08005f40 <__ssputs_r>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	688e      	ldr	r6, [r1, #8]
 8005f46:	429e      	cmp	r6, r3
 8005f48:	4682      	mov	sl, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4690      	mov	r8, r2
 8005f4e:	461f      	mov	r7, r3
 8005f50:	d838      	bhi.n	8005fc4 <__ssputs_r+0x84>
 8005f52:	898a      	ldrh	r2, [r1, #12]
 8005f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f58:	d032      	beq.n	8005fc0 <__ssputs_r+0x80>
 8005f5a:	6825      	ldr	r5, [r4, #0]
 8005f5c:	6909      	ldr	r1, [r1, #16]
 8005f5e:	eba5 0901 	sub.w	r9, r5, r1
 8005f62:	6965      	ldr	r5, [r4, #20]
 8005f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	444b      	add	r3, r9
 8005f70:	106d      	asrs	r5, r5, #1
 8005f72:	429d      	cmp	r5, r3
 8005f74:	bf38      	it	cc
 8005f76:	461d      	movcc	r5, r3
 8005f78:	0553      	lsls	r3, r2, #21
 8005f7a:	d531      	bpl.n	8005fe0 <__ssputs_r+0xa0>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f000 fb47 	bl	8006610 <_malloc_r>
 8005f82:	4606      	mov	r6, r0
 8005f84:	b950      	cbnz	r0, 8005f9c <__ssputs_r+0x5c>
 8005f86:	230c      	movs	r3, #12
 8005f88:	f8ca 3000 	str.w	r3, [sl]
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	6921      	ldr	r1, [r4, #16]
 8005f9e:	464a      	mov	r2, r9
 8005fa0:	f000 fabe 	bl	8006520 <memcpy>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	6126      	str	r6, [r4, #16]
 8005fb2:	6165      	str	r5, [r4, #20]
 8005fb4:	444e      	add	r6, r9
 8005fb6:	eba5 0509 	sub.w	r5, r5, r9
 8005fba:	6026      	str	r6, [r4, #0]
 8005fbc:	60a5      	str	r5, [r4, #8]
 8005fbe:	463e      	mov	r6, r7
 8005fc0:	42be      	cmp	r6, r7
 8005fc2:	d900      	bls.n	8005fc6 <__ssputs_r+0x86>
 8005fc4:	463e      	mov	r6, r7
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	4641      	mov	r1, r8
 8005fcc:	f000 fab6 	bl	800653c <memmove>
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	6822      	ldr	r2, [r4, #0]
 8005fd4:	1b9b      	subs	r3, r3, r6
 8005fd6:	4432      	add	r2, r6
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	6022      	str	r2, [r4, #0]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e7db      	b.n	8005f98 <__ssputs_r+0x58>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	f000 fb6f 	bl	80066c4 <_realloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d1e1      	bne.n	8005fb0 <__ssputs_r+0x70>
 8005fec:	6921      	ldr	r1, [r4, #16]
 8005fee:	4650      	mov	r0, sl
 8005ff0:	f000 fabe 	bl	8006570 <_free_r>
 8005ff4:	e7c7      	b.n	8005f86 <__ssputs_r+0x46>
	...

08005ff8 <_svfiprintf_r>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	4698      	mov	r8, r3
 8005ffe:	898b      	ldrh	r3, [r1, #12]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	b09d      	sub	sp, #116	; 0x74
 8006004:	4607      	mov	r7, r0
 8006006:	460d      	mov	r5, r1
 8006008:	4614      	mov	r4, r2
 800600a:	d50e      	bpl.n	800602a <_svfiprintf_r+0x32>
 800600c:	690b      	ldr	r3, [r1, #16]
 800600e:	b963      	cbnz	r3, 800602a <_svfiprintf_r+0x32>
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	f000 fafd 	bl	8006610 <_malloc_r>
 8006016:	6028      	str	r0, [r5, #0]
 8006018:	6128      	str	r0, [r5, #16]
 800601a:	b920      	cbnz	r0, 8006026 <_svfiprintf_r+0x2e>
 800601c:	230c      	movs	r3, #12
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e0d1      	b.n	80061ca <_svfiprintf_r+0x1d2>
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	616b      	str	r3, [r5, #20]
 800602a:	2300      	movs	r3, #0
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	2320      	movs	r3, #32
 8006030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006034:	f8cd 800c 	str.w	r8, [sp, #12]
 8006038:	2330      	movs	r3, #48	; 0x30
 800603a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061e4 <_svfiprintf_r+0x1ec>
 800603e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006042:	f04f 0901 	mov.w	r9, #1
 8006046:	4623      	mov	r3, r4
 8006048:	469a      	mov	sl, r3
 800604a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800604e:	b10a      	cbz	r2, 8006054 <_svfiprintf_r+0x5c>
 8006050:	2a25      	cmp	r2, #37	; 0x25
 8006052:	d1f9      	bne.n	8006048 <_svfiprintf_r+0x50>
 8006054:	ebba 0b04 	subs.w	fp, sl, r4
 8006058:	d00b      	beq.n	8006072 <_svfiprintf_r+0x7a>
 800605a:	465b      	mov	r3, fp
 800605c:	4622      	mov	r2, r4
 800605e:	4629      	mov	r1, r5
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff ff6d 	bl	8005f40 <__ssputs_r>
 8006066:	3001      	adds	r0, #1
 8006068:	f000 80aa 	beq.w	80061c0 <_svfiprintf_r+0x1c8>
 800606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800606e:	445a      	add	r2, fp
 8006070:	9209      	str	r2, [sp, #36]	; 0x24
 8006072:	f89a 3000 	ldrb.w	r3, [sl]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a2 	beq.w	80061c0 <_svfiprintf_r+0x1c8>
 800607c:	2300      	movs	r3, #0
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006086:	f10a 0a01 	add.w	sl, sl, #1
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	9307      	str	r3, [sp, #28]
 800608e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006092:	931a      	str	r3, [sp, #104]	; 0x68
 8006094:	4654      	mov	r4, sl
 8006096:	2205      	movs	r2, #5
 8006098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609c:	4851      	ldr	r0, [pc, #324]	; (80061e4 <_svfiprintf_r+0x1ec>)
 800609e:	f7fa f89f 	bl	80001e0 <memchr>
 80060a2:	9a04      	ldr	r2, [sp, #16]
 80060a4:	b9d8      	cbnz	r0, 80060de <_svfiprintf_r+0xe6>
 80060a6:	06d0      	lsls	r0, r2, #27
 80060a8:	bf44      	itt	mi
 80060aa:	2320      	movmi	r3, #32
 80060ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b0:	0711      	lsls	r1, r2, #28
 80060b2:	bf44      	itt	mi
 80060b4:	232b      	movmi	r3, #43	; 0x2b
 80060b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ba:	f89a 3000 	ldrb.w	r3, [sl]
 80060be:	2b2a      	cmp	r3, #42	; 0x2a
 80060c0:	d015      	beq.n	80060ee <_svfiprintf_r+0xf6>
 80060c2:	9a07      	ldr	r2, [sp, #28]
 80060c4:	4654      	mov	r4, sl
 80060c6:	2000      	movs	r0, #0
 80060c8:	f04f 0c0a 	mov.w	ip, #10
 80060cc:	4621      	mov	r1, r4
 80060ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d2:	3b30      	subs	r3, #48	; 0x30
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d94e      	bls.n	8006176 <_svfiprintf_r+0x17e>
 80060d8:	b1b0      	cbz	r0, 8006108 <_svfiprintf_r+0x110>
 80060da:	9207      	str	r2, [sp, #28]
 80060dc:	e014      	b.n	8006108 <_svfiprintf_r+0x110>
 80060de:	eba0 0308 	sub.w	r3, r0, r8
 80060e2:	fa09 f303 	lsl.w	r3, r9, r3
 80060e6:	4313      	orrs	r3, r2
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	46a2      	mov	sl, r4
 80060ec:	e7d2      	b.n	8006094 <_svfiprintf_r+0x9c>
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	1d19      	adds	r1, r3, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	9103      	str	r1, [sp, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbb      	ittet	lt
 80060fa:	425b      	neglt	r3, r3
 80060fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006100:	9307      	strge	r3, [sp, #28]
 8006102:	9307      	strlt	r3, [sp, #28]
 8006104:	bfb8      	it	lt
 8006106:	9204      	strlt	r2, [sp, #16]
 8006108:	7823      	ldrb	r3, [r4, #0]
 800610a:	2b2e      	cmp	r3, #46	; 0x2e
 800610c:	d10c      	bne.n	8006128 <_svfiprintf_r+0x130>
 800610e:	7863      	ldrb	r3, [r4, #1]
 8006110:	2b2a      	cmp	r3, #42	; 0x2a
 8006112:	d135      	bne.n	8006180 <_svfiprintf_r+0x188>
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	1d1a      	adds	r2, r3, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	9203      	str	r2, [sp, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	bfb8      	it	lt
 8006120:	f04f 33ff 	movlt.w	r3, #4294967295
 8006124:	3402      	adds	r4, #2
 8006126:	9305      	str	r3, [sp, #20]
 8006128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061f4 <_svfiprintf_r+0x1fc>
 800612c:	7821      	ldrb	r1, [r4, #0]
 800612e:	2203      	movs	r2, #3
 8006130:	4650      	mov	r0, sl
 8006132:	f7fa f855 	bl	80001e0 <memchr>
 8006136:	b140      	cbz	r0, 800614a <_svfiprintf_r+0x152>
 8006138:	2340      	movs	r3, #64	; 0x40
 800613a:	eba0 000a 	sub.w	r0, r0, sl
 800613e:	fa03 f000 	lsl.w	r0, r3, r0
 8006142:	9b04      	ldr	r3, [sp, #16]
 8006144:	4303      	orrs	r3, r0
 8006146:	3401      	adds	r4, #1
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614e:	4826      	ldr	r0, [pc, #152]	; (80061e8 <_svfiprintf_r+0x1f0>)
 8006150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006154:	2206      	movs	r2, #6
 8006156:	f7fa f843 	bl	80001e0 <memchr>
 800615a:	2800      	cmp	r0, #0
 800615c:	d038      	beq.n	80061d0 <_svfiprintf_r+0x1d8>
 800615e:	4b23      	ldr	r3, [pc, #140]	; (80061ec <_svfiprintf_r+0x1f4>)
 8006160:	bb1b      	cbnz	r3, 80061aa <_svfiprintf_r+0x1b2>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	3307      	adds	r3, #7
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	3308      	adds	r3, #8
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	4433      	add	r3, r6
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	e767      	b.n	8006046 <_svfiprintf_r+0x4e>
 8006176:	fb0c 3202 	mla	r2, ip, r2, r3
 800617a:	460c      	mov	r4, r1
 800617c:	2001      	movs	r0, #1
 800617e:	e7a5      	b.n	80060cc <_svfiprintf_r+0xd4>
 8006180:	2300      	movs	r3, #0
 8006182:	3401      	adds	r4, #1
 8006184:	9305      	str	r3, [sp, #20]
 8006186:	4619      	mov	r1, r3
 8006188:	f04f 0c0a 	mov.w	ip, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006192:	3a30      	subs	r2, #48	; 0x30
 8006194:	2a09      	cmp	r2, #9
 8006196:	d903      	bls.n	80061a0 <_svfiprintf_r+0x1a8>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0c5      	beq.n	8006128 <_svfiprintf_r+0x130>
 800619c:	9105      	str	r1, [sp, #20]
 800619e:	e7c3      	b.n	8006128 <_svfiprintf_r+0x130>
 80061a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a4:	4604      	mov	r4, r0
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7f0      	b.n	800618c <_svfiprintf_r+0x194>
 80061aa:	ab03      	add	r3, sp, #12
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	462a      	mov	r2, r5
 80061b0:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <_svfiprintf_r+0x1f8>)
 80061b2:	a904      	add	r1, sp, #16
 80061b4:	4638      	mov	r0, r7
 80061b6:	f3af 8000 	nop.w
 80061ba:	1c42      	adds	r2, r0, #1
 80061bc:	4606      	mov	r6, r0
 80061be:	d1d6      	bne.n	800616e <_svfiprintf_r+0x176>
 80061c0:	89ab      	ldrh	r3, [r5, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	f53f af2c 	bmi.w	8006020 <_svfiprintf_r+0x28>
 80061c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ca:	b01d      	add	sp, #116	; 0x74
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	462a      	mov	r2, r5
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <_svfiprintf_r+0x1f8>)
 80061d8:	a904      	add	r1, sp, #16
 80061da:	4638      	mov	r0, r7
 80061dc:	f000 f87a 	bl	80062d4 <_printf_i>
 80061e0:	e7eb      	b.n	80061ba <_svfiprintf_r+0x1c2>
 80061e2:	bf00      	nop
 80061e4:	0800974c 	.word	0x0800974c
 80061e8:	08009756 	.word	0x08009756
 80061ec:	00000000 	.word	0x00000000
 80061f0:	08005f41 	.word	0x08005f41
 80061f4:	08009752 	.word	0x08009752

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4699      	mov	r9, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006208:	4293      	cmp	r3, r2
 800620a:	bfb8      	it	lt
 800620c:	4613      	movlt	r3, r2
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006214:	4607      	mov	r7, r0
 8006216:	460c      	mov	r4, r1
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc26      	bgt.n	800628e <_printf_common+0x96>
 8006240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006244:	1e13      	subs	r3, r2, #0
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d42b      	bmi.n	80062a8 <_printf_common+0xb0>
 8006250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006254:	4649      	mov	r1, r9
 8006256:	4638      	mov	r0, r7
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d01e      	beq.n	800629c <_printf_common+0xa4>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	68e5      	ldr	r5, [r4, #12]
 8006262:	6832      	ldr	r2, [r6, #0]
 8006264:	f003 0306 	and.w	r3, r3, #6
 8006268:	2b04      	cmp	r3, #4
 800626a:	bf08      	it	eq
 800626c:	1aad      	subeq	r5, r5, r2
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	bf0c      	ite	eq
 8006274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006278:	2500      	movne	r5, #0
 800627a:	4293      	cmp	r3, r2
 800627c:	bfc4      	itt	gt
 800627e:	1a9b      	subgt	r3, r3, r2
 8006280:	18ed      	addgt	r5, r5, r3
 8006282:	2600      	movs	r6, #0
 8006284:	341a      	adds	r4, #26
 8006286:	42b5      	cmp	r5, r6
 8006288:	d11a      	bne.n	80062c0 <_printf_common+0xc8>
 800628a:	2000      	movs	r0, #0
 800628c:	e008      	b.n	80062a0 <_printf_common+0xa8>
 800628e:	2301      	movs	r3, #1
 8006290:	4652      	mov	r2, sl
 8006292:	4649      	mov	r1, r9
 8006294:	4638      	mov	r0, r7
 8006296:	47c0      	blx	r8
 8006298:	3001      	adds	r0, #1
 800629a:	d103      	bne.n	80062a4 <_printf_common+0xac>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a4:	3501      	adds	r5, #1
 80062a6:	e7c6      	b.n	8006236 <_printf_common+0x3e>
 80062a8:	18e1      	adds	r1, r4, r3
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	2030      	movs	r0, #48	; 0x30
 80062ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062b2:	4422      	add	r2, r4
 80062b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062bc:	3302      	adds	r3, #2
 80062be:	e7c7      	b.n	8006250 <_printf_common+0x58>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4622      	mov	r2, r4
 80062c4:	4649      	mov	r1, r9
 80062c6:	4638      	mov	r0, r7
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0e6      	beq.n	800629c <_printf_common+0xa4>
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7d9      	b.n	8006286 <_printf_common+0x8e>
	...

080062d4 <_printf_i>:
 80062d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	460c      	mov	r4, r1
 80062da:	4691      	mov	r9, r2
 80062dc:	7e27      	ldrb	r7, [r4, #24]
 80062de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062e0:	2f78      	cmp	r7, #120	; 0x78
 80062e2:	4680      	mov	r8, r0
 80062e4:	469a      	mov	sl, r3
 80062e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ea:	d807      	bhi.n	80062fc <_printf_i+0x28>
 80062ec:	2f62      	cmp	r7, #98	; 0x62
 80062ee:	d80a      	bhi.n	8006306 <_printf_i+0x32>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	f000 80d8 	beq.w	80064a6 <_printf_i+0x1d2>
 80062f6:	2f58      	cmp	r7, #88	; 0x58
 80062f8:	f000 80a3 	beq.w	8006442 <_printf_i+0x16e>
 80062fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006304:	e03a      	b.n	800637c <_printf_i+0xa8>
 8006306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800630a:	2b15      	cmp	r3, #21
 800630c:	d8f6      	bhi.n	80062fc <_printf_i+0x28>
 800630e:	a001      	add	r0, pc, #4	; (adr r0, 8006314 <_printf_i+0x40>)
 8006310:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006314:	0800636d 	.word	0x0800636d
 8006318:	08006381 	.word	0x08006381
 800631c:	080062fd 	.word	0x080062fd
 8006320:	080062fd 	.word	0x080062fd
 8006324:	080062fd 	.word	0x080062fd
 8006328:	080062fd 	.word	0x080062fd
 800632c:	08006381 	.word	0x08006381
 8006330:	080062fd 	.word	0x080062fd
 8006334:	080062fd 	.word	0x080062fd
 8006338:	080062fd 	.word	0x080062fd
 800633c:	080062fd 	.word	0x080062fd
 8006340:	0800648d 	.word	0x0800648d
 8006344:	080063b1 	.word	0x080063b1
 8006348:	0800646f 	.word	0x0800646f
 800634c:	080062fd 	.word	0x080062fd
 8006350:	080062fd 	.word	0x080062fd
 8006354:	080064af 	.word	0x080064af
 8006358:	080062fd 	.word	0x080062fd
 800635c:	080063b1 	.word	0x080063b1
 8006360:	080062fd 	.word	0x080062fd
 8006364:	080062fd 	.word	0x080062fd
 8006368:	08006477 	.word	0x08006477
 800636c:	680b      	ldr	r3, [r1, #0]
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	600a      	str	r2, [r1, #0]
 8006374:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800637c:	2301      	movs	r3, #1
 800637e:	e0a3      	b.n	80064c8 <_printf_i+0x1f4>
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	6808      	ldr	r0, [r1, #0]
 8006384:	062e      	lsls	r6, r5, #24
 8006386:	f100 0304 	add.w	r3, r0, #4
 800638a:	d50a      	bpl.n	80063a2 <_printf_i+0xce>
 800638c:	6805      	ldr	r5, [r0, #0]
 800638e:	600b      	str	r3, [r1, #0]
 8006390:	2d00      	cmp	r5, #0
 8006392:	da03      	bge.n	800639c <_printf_i+0xc8>
 8006394:	232d      	movs	r3, #45	; 0x2d
 8006396:	426d      	negs	r5, r5
 8006398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800639c:	485e      	ldr	r0, [pc, #376]	; (8006518 <_printf_i+0x244>)
 800639e:	230a      	movs	r3, #10
 80063a0:	e019      	b.n	80063d6 <_printf_i+0x102>
 80063a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063a6:	6805      	ldr	r5, [r0, #0]
 80063a8:	600b      	str	r3, [r1, #0]
 80063aa:	bf18      	it	ne
 80063ac:	b22d      	sxthne	r5, r5
 80063ae:	e7ef      	b.n	8006390 <_printf_i+0xbc>
 80063b0:	680b      	ldr	r3, [r1, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	1d18      	adds	r0, r3, #4
 80063b6:	6008      	str	r0, [r1, #0]
 80063b8:	0628      	lsls	r0, r5, #24
 80063ba:	d501      	bpl.n	80063c0 <_printf_i+0xec>
 80063bc:	681d      	ldr	r5, [r3, #0]
 80063be:	e002      	b.n	80063c6 <_printf_i+0xf2>
 80063c0:	0669      	lsls	r1, r5, #25
 80063c2:	d5fb      	bpl.n	80063bc <_printf_i+0xe8>
 80063c4:	881d      	ldrh	r5, [r3, #0]
 80063c6:	4854      	ldr	r0, [pc, #336]	; (8006518 <_printf_i+0x244>)
 80063c8:	2f6f      	cmp	r7, #111	; 0x6f
 80063ca:	bf0c      	ite	eq
 80063cc:	2308      	moveq	r3, #8
 80063ce:	230a      	movne	r3, #10
 80063d0:	2100      	movs	r1, #0
 80063d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063d6:	6866      	ldr	r6, [r4, #4]
 80063d8:	60a6      	str	r6, [r4, #8]
 80063da:	2e00      	cmp	r6, #0
 80063dc:	bfa2      	ittt	ge
 80063de:	6821      	ldrge	r1, [r4, #0]
 80063e0:	f021 0104 	bicge.w	r1, r1, #4
 80063e4:	6021      	strge	r1, [r4, #0]
 80063e6:	b90d      	cbnz	r5, 80063ec <_printf_i+0x118>
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	d04d      	beq.n	8006488 <_printf_i+0x1b4>
 80063ec:	4616      	mov	r6, r2
 80063ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80063f2:	fb03 5711 	mls	r7, r3, r1, r5
 80063f6:	5dc7      	ldrb	r7, [r0, r7]
 80063f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063fc:	462f      	mov	r7, r5
 80063fe:	42bb      	cmp	r3, r7
 8006400:	460d      	mov	r5, r1
 8006402:	d9f4      	bls.n	80063ee <_printf_i+0x11a>
 8006404:	2b08      	cmp	r3, #8
 8006406:	d10b      	bne.n	8006420 <_printf_i+0x14c>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	07df      	lsls	r7, r3, #31
 800640c:	d508      	bpl.n	8006420 <_printf_i+0x14c>
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	6861      	ldr	r1, [r4, #4]
 8006412:	4299      	cmp	r1, r3
 8006414:	bfde      	ittt	le
 8006416:	2330      	movle	r3, #48	; 0x30
 8006418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800641c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006420:	1b92      	subs	r2, r2, r6
 8006422:	6122      	str	r2, [r4, #16]
 8006424:	f8cd a000 	str.w	sl, [sp]
 8006428:	464b      	mov	r3, r9
 800642a:	aa03      	add	r2, sp, #12
 800642c:	4621      	mov	r1, r4
 800642e:	4640      	mov	r0, r8
 8006430:	f7ff fee2 	bl	80061f8 <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	d14c      	bne.n	80064d2 <_printf_i+0x1fe>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	b004      	add	sp, #16
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	4835      	ldr	r0, [pc, #212]	; (8006518 <_printf_i+0x244>)
 8006444:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	680e      	ldr	r6, [r1, #0]
 800644c:	061f      	lsls	r7, r3, #24
 800644e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006452:	600e      	str	r6, [r1, #0]
 8006454:	d514      	bpl.n	8006480 <_printf_i+0x1ac>
 8006456:	07d9      	lsls	r1, r3, #31
 8006458:	bf44      	itt	mi
 800645a:	f043 0320 	orrmi.w	r3, r3, #32
 800645e:	6023      	strmi	r3, [r4, #0]
 8006460:	b91d      	cbnz	r5, 800646a <_printf_i+0x196>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	f023 0320 	bic.w	r3, r3, #32
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	2310      	movs	r3, #16
 800646c:	e7b0      	b.n	80063d0 <_printf_i+0xfc>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	f043 0320 	orr.w	r3, r3, #32
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	2378      	movs	r3, #120	; 0x78
 8006478:	4828      	ldr	r0, [pc, #160]	; (800651c <_printf_i+0x248>)
 800647a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800647e:	e7e3      	b.n	8006448 <_printf_i+0x174>
 8006480:	065e      	lsls	r6, r3, #25
 8006482:	bf48      	it	mi
 8006484:	b2ad      	uxthmi	r5, r5
 8006486:	e7e6      	b.n	8006456 <_printf_i+0x182>
 8006488:	4616      	mov	r6, r2
 800648a:	e7bb      	b.n	8006404 <_printf_i+0x130>
 800648c:	680b      	ldr	r3, [r1, #0]
 800648e:	6826      	ldr	r6, [r4, #0]
 8006490:	6960      	ldr	r0, [r4, #20]
 8006492:	1d1d      	adds	r5, r3, #4
 8006494:	600d      	str	r5, [r1, #0]
 8006496:	0635      	lsls	r5, r6, #24
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0x1cc>
 800649c:	6018      	str	r0, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0x1d2>
 80064a0:	0671      	lsls	r1, r6, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0x1c8>
 80064a4:	8018      	strh	r0, [r3, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	4616      	mov	r6, r2
 80064ac:	e7ba      	b.n	8006424 <_printf_i+0x150>
 80064ae:	680b      	ldr	r3, [r1, #0]
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	600a      	str	r2, [r1, #0]
 80064b4:	681e      	ldr	r6, [r3, #0]
 80064b6:	6862      	ldr	r2, [r4, #4]
 80064b8:	2100      	movs	r1, #0
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7f9 fe90 	bl	80001e0 <memchr>
 80064c0:	b108      	cbz	r0, 80064c6 <_printf_i+0x1f2>
 80064c2:	1b80      	subs	r0, r0, r6
 80064c4:	6060      	str	r0, [r4, #4]
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	2300      	movs	r3, #0
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d0:	e7a8      	b.n	8006424 <_printf_i+0x150>
 80064d2:	6923      	ldr	r3, [r4, #16]
 80064d4:	4632      	mov	r2, r6
 80064d6:	4649      	mov	r1, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	47d0      	blx	sl
 80064dc:	3001      	adds	r0, #1
 80064de:	d0ab      	beq.n	8006438 <_printf_i+0x164>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	079b      	lsls	r3, r3, #30
 80064e4:	d413      	bmi.n	800650e <_printf_i+0x23a>
 80064e6:	68e0      	ldr	r0, [r4, #12]
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	4298      	cmp	r0, r3
 80064ec:	bfb8      	it	lt
 80064ee:	4618      	movlt	r0, r3
 80064f0:	e7a4      	b.n	800643c <_printf_i+0x168>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4632      	mov	r2, r6
 80064f6:	4649      	mov	r1, r9
 80064f8:	4640      	mov	r0, r8
 80064fa:	47d0      	blx	sl
 80064fc:	3001      	adds	r0, #1
 80064fe:	d09b      	beq.n	8006438 <_printf_i+0x164>
 8006500:	3501      	adds	r5, #1
 8006502:	68e3      	ldr	r3, [r4, #12]
 8006504:	9903      	ldr	r1, [sp, #12]
 8006506:	1a5b      	subs	r3, r3, r1
 8006508:	42ab      	cmp	r3, r5
 800650a:	dcf2      	bgt.n	80064f2 <_printf_i+0x21e>
 800650c:	e7eb      	b.n	80064e6 <_printf_i+0x212>
 800650e:	2500      	movs	r5, #0
 8006510:	f104 0619 	add.w	r6, r4, #25
 8006514:	e7f5      	b.n	8006502 <_printf_i+0x22e>
 8006516:	bf00      	nop
 8006518:	0800975d 	.word	0x0800975d
 800651c:	0800976e 	.word	0x0800976e

08006520 <memcpy>:
 8006520:	440a      	add	r2, r1
 8006522:	4291      	cmp	r1, r2
 8006524:	f100 33ff 	add.w	r3, r0, #4294967295
 8006528:	d100      	bne.n	800652c <memcpy+0xc>
 800652a:	4770      	bx	lr
 800652c:	b510      	push	{r4, lr}
 800652e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006536:	4291      	cmp	r1, r2
 8006538:	d1f9      	bne.n	800652e <memcpy+0xe>
 800653a:	bd10      	pop	{r4, pc}

0800653c <memmove>:
 800653c:	4288      	cmp	r0, r1
 800653e:	b510      	push	{r4, lr}
 8006540:	eb01 0402 	add.w	r4, r1, r2
 8006544:	d902      	bls.n	800654c <memmove+0x10>
 8006546:	4284      	cmp	r4, r0
 8006548:	4623      	mov	r3, r4
 800654a:	d807      	bhi.n	800655c <memmove+0x20>
 800654c:	1e43      	subs	r3, r0, #1
 800654e:	42a1      	cmp	r1, r4
 8006550:	d008      	beq.n	8006564 <memmove+0x28>
 8006552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800655a:	e7f8      	b.n	800654e <memmove+0x12>
 800655c:	4402      	add	r2, r0
 800655e:	4601      	mov	r1, r0
 8006560:	428a      	cmp	r2, r1
 8006562:	d100      	bne.n	8006566 <memmove+0x2a>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800656a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800656e:	e7f7      	b.n	8006560 <memmove+0x24>

08006570 <_free_r>:
 8006570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006572:	2900      	cmp	r1, #0
 8006574:	d048      	beq.n	8006608 <_free_r+0x98>
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f1a1 0404 	sub.w	r4, r1, #4
 8006582:	bfb8      	it	lt
 8006584:	18e4      	addlt	r4, r4, r3
 8006586:	f000 f8d3 	bl	8006730 <__malloc_lock>
 800658a:	4a20      	ldr	r2, [pc, #128]	; (800660c <_free_r+0x9c>)
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	4615      	mov	r5, r2
 8006592:	b933      	cbnz	r3, 80065a2 <_free_r+0x32>
 8006594:	6063      	str	r3, [r4, #4]
 8006596:	6014      	str	r4, [r2, #0]
 8006598:	b003      	add	sp, #12
 800659a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800659e:	f000 b8cd 	b.w	800673c <__malloc_unlock>
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	d90b      	bls.n	80065be <_free_r+0x4e>
 80065a6:	6821      	ldr	r1, [r4, #0]
 80065a8:	1862      	adds	r2, r4, r1
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bf04      	itt	eq
 80065ae:	681a      	ldreq	r2, [r3, #0]
 80065b0:	685b      	ldreq	r3, [r3, #4]
 80065b2:	6063      	str	r3, [r4, #4]
 80065b4:	bf04      	itt	eq
 80065b6:	1852      	addeq	r2, r2, r1
 80065b8:	6022      	streq	r2, [r4, #0]
 80065ba:	602c      	str	r4, [r5, #0]
 80065bc:	e7ec      	b.n	8006598 <_free_r+0x28>
 80065be:	461a      	mov	r2, r3
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b10b      	cbz	r3, 80065c8 <_free_r+0x58>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d9fa      	bls.n	80065be <_free_r+0x4e>
 80065c8:	6811      	ldr	r1, [r2, #0]
 80065ca:	1855      	adds	r5, r2, r1
 80065cc:	42a5      	cmp	r5, r4
 80065ce:	d10b      	bne.n	80065e8 <_free_r+0x78>
 80065d0:	6824      	ldr	r4, [r4, #0]
 80065d2:	4421      	add	r1, r4
 80065d4:	1854      	adds	r4, r2, r1
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	d1dd      	bne.n	8006598 <_free_r+0x28>
 80065dc:	681c      	ldr	r4, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	6053      	str	r3, [r2, #4]
 80065e2:	4421      	add	r1, r4
 80065e4:	6011      	str	r1, [r2, #0]
 80065e6:	e7d7      	b.n	8006598 <_free_r+0x28>
 80065e8:	d902      	bls.n	80065f0 <_free_r+0x80>
 80065ea:	230c      	movs	r3, #12
 80065ec:	6003      	str	r3, [r0, #0]
 80065ee:	e7d3      	b.n	8006598 <_free_r+0x28>
 80065f0:	6825      	ldr	r5, [r4, #0]
 80065f2:	1961      	adds	r1, r4, r5
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf04      	itt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	bf04      	itt	eq
 8006600:	1949      	addeq	r1, r1, r5
 8006602:	6021      	streq	r1, [r4, #0]
 8006604:	6054      	str	r4, [r2, #4]
 8006606:	e7c7      	b.n	8006598 <_free_r+0x28>
 8006608:	b003      	add	sp, #12
 800660a:	bd30      	pop	{r4, r5, pc}
 800660c:	200000ec 	.word	0x200000ec

08006610 <_malloc_r>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	1ccd      	adds	r5, r1, #3
 8006614:	f025 0503 	bic.w	r5, r5, #3
 8006618:	3508      	adds	r5, #8
 800661a:	2d0c      	cmp	r5, #12
 800661c:	bf38      	it	cc
 800661e:	250c      	movcc	r5, #12
 8006620:	2d00      	cmp	r5, #0
 8006622:	4606      	mov	r6, r0
 8006624:	db01      	blt.n	800662a <_malloc_r+0x1a>
 8006626:	42a9      	cmp	r1, r5
 8006628:	d903      	bls.n	8006632 <_malloc_r+0x22>
 800662a:	230c      	movs	r3, #12
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	2000      	movs	r0, #0
 8006630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006632:	f000 f87d 	bl	8006730 <__malloc_lock>
 8006636:	4921      	ldr	r1, [pc, #132]	; (80066bc <_malloc_r+0xac>)
 8006638:	680a      	ldr	r2, [r1, #0]
 800663a:	4614      	mov	r4, r2
 800663c:	b99c      	cbnz	r4, 8006666 <_malloc_r+0x56>
 800663e:	4f20      	ldr	r7, [pc, #128]	; (80066c0 <_malloc_r+0xb0>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	b923      	cbnz	r3, 800664e <_malloc_r+0x3e>
 8006644:	4621      	mov	r1, r4
 8006646:	4630      	mov	r0, r6
 8006648:	f000 f862 	bl	8006710 <_sbrk_r>
 800664c:	6038      	str	r0, [r7, #0]
 800664e:	4629      	mov	r1, r5
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f85d 	bl	8006710 <_sbrk_r>
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d123      	bne.n	80066a2 <_malloc_r+0x92>
 800665a:	230c      	movs	r3, #12
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	4630      	mov	r0, r6
 8006660:	f000 f86c 	bl	800673c <__malloc_unlock>
 8006664:	e7e3      	b.n	800662e <_malloc_r+0x1e>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	1b5b      	subs	r3, r3, r5
 800666a:	d417      	bmi.n	800669c <_malloc_r+0x8c>
 800666c:	2b0b      	cmp	r3, #11
 800666e:	d903      	bls.n	8006678 <_malloc_r+0x68>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	441c      	add	r4, r3
 8006674:	6025      	str	r5, [r4, #0]
 8006676:	e004      	b.n	8006682 <_malloc_r+0x72>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	42a2      	cmp	r2, r4
 800667c:	bf0c      	ite	eq
 800667e:	600b      	streq	r3, [r1, #0]
 8006680:	6053      	strne	r3, [r2, #4]
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f85a 	bl	800673c <__malloc_unlock>
 8006688:	f104 000b 	add.w	r0, r4, #11
 800668c:	1d23      	adds	r3, r4, #4
 800668e:	f020 0007 	bic.w	r0, r0, #7
 8006692:	1ac2      	subs	r2, r0, r3
 8006694:	d0cc      	beq.n	8006630 <_malloc_r+0x20>
 8006696:	1a1b      	subs	r3, r3, r0
 8006698:	50a3      	str	r3, [r4, r2]
 800669a:	e7c9      	b.n	8006630 <_malloc_r+0x20>
 800669c:	4622      	mov	r2, r4
 800669e:	6864      	ldr	r4, [r4, #4]
 80066a0:	e7cc      	b.n	800663c <_malloc_r+0x2c>
 80066a2:	1cc4      	adds	r4, r0, #3
 80066a4:	f024 0403 	bic.w	r4, r4, #3
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d0e3      	beq.n	8006674 <_malloc_r+0x64>
 80066ac:	1a21      	subs	r1, r4, r0
 80066ae:	4630      	mov	r0, r6
 80066b0:	f000 f82e 	bl	8006710 <_sbrk_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d1dd      	bne.n	8006674 <_malloc_r+0x64>
 80066b8:	e7cf      	b.n	800665a <_malloc_r+0x4a>
 80066ba:	bf00      	nop
 80066bc:	200000ec 	.word	0x200000ec
 80066c0:	200000f0 	.word	0x200000f0

080066c4 <_realloc_r>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	4607      	mov	r7, r0
 80066c8:	4614      	mov	r4, r2
 80066ca:	460e      	mov	r6, r1
 80066cc:	b921      	cbnz	r1, 80066d8 <_realloc_r+0x14>
 80066ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066d2:	4611      	mov	r1, r2
 80066d4:	f7ff bf9c 	b.w	8006610 <_malloc_r>
 80066d8:	b922      	cbnz	r2, 80066e4 <_realloc_r+0x20>
 80066da:	f7ff ff49 	bl	8006570 <_free_r>
 80066de:	4625      	mov	r5, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e4:	f000 f830 	bl	8006748 <_malloc_usable_size_r>
 80066e8:	42a0      	cmp	r0, r4
 80066ea:	d20f      	bcs.n	800670c <_realloc_r+0x48>
 80066ec:	4621      	mov	r1, r4
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7ff ff8e 	bl	8006610 <_malloc_r>
 80066f4:	4605      	mov	r5, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d0f2      	beq.n	80066e0 <_realloc_r+0x1c>
 80066fa:	4631      	mov	r1, r6
 80066fc:	4622      	mov	r2, r4
 80066fe:	f7ff ff0f 	bl	8006520 <memcpy>
 8006702:	4631      	mov	r1, r6
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff ff33 	bl	8006570 <_free_r>
 800670a:	e7e9      	b.n	80066e0 <_realloc_r+0x1c>
 800670c:	4635      	mov	r5, r6
 800670e:	e7e7      	b.n	80066e0 <_realloc_r+0x1c>

08006710 <_sbrk_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d06      	ldr	r5, [pc, #24]	; (800672c <_sbrk_r+0x1c>)
 8006714:	2300      	movs	r3, #0
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	f7fb feb2 	bl	8002484 <_sbrk>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_sbrk_r+0x1a>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_sbrk_r+0x1a>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	200002a8 	.word	0x200002a8

08006730 <__malloc_lock>:
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <__malloc_lock+0x8>)
 8006732:	f000 b811 	b.w	8006758 <__retarget_lock_acquire_recursive>
 8006736:	bf00      	nop
 8006738:	200002b0 	.word	0x200002b0

0800673c <__malloc_unlock>:
 800673c:	4801      	ldr	r0, [pc, #4]	; (8006744 <__malloc_unlock+0x8>)
 800673e:	f000 b80c 	b.w	800675a <__retarget_lock_release_recursive>
 8006742:	bf00      	nop
 8006744:	200002b0 	.word	0x200002b0

08006748 <_malloc_usable_size_r>:
 8006748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674c:	1f18      	subs	r0, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfbc      	itt	lt
 8006752:	580b      	ldrlt	r3, [r1, r0]
 8006754:	18c0      	addlt	r0, r0, r3
 8006756:	4770      	bx	lr

08006758 <__retarget_lock_acquire_recursive>:
 8006758:	4770      	bx	lr

0800675a <__retarget_lock_release_recursive>:
 800675a:	4770      	bx	lr

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
